{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Intro","text":"<p>Shouter Log</p> <p>This class uses the logging module to create and manage a logger for displaying formatted messages. It provides a method to output various types of lines and headers, with customizable message and line lengths. The purpose is to be integrated into other classes that also use logger.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install shouterlog\n</code></pre>"},{"location":"usage-examples/","title":"Shouter Usage Examples","text":"<p>The Shouter class is designed for managing and displaying formatted log messages, utilizing Python's logging module. </p> <pre><code>import sys\nsys.path.append('../')\nfrom python_modules.shouterlog import Shouter\n# optional\nimport logging\n</code></pre>"},{"location":"usage-examples/#usage-examples","title":"Usage examples","text":"<p>The examples contain:  1. initialize Shouter class 2. basic usage like logging 3. using different output types 4. custom logger configuration 5. backwards compatibility with existing loggers 6. built-in records from Shouter usage 7. debugging capabilities of Shouter</p>"},{"location":"usage-examples/#1-initialize-shouter-class","title":"1. Initialize Shouter Class","text":"<pre><code>shouter = Shouter(\n    # optional/ required\n    supported_classes = (),\n    # optionally \n    ## Formatting settings\n    dotline_length = 50,\n    auto_output_type_selection = True,\n    # For saving records\n    tears_persist_path = '../env_spec/log_records.json',\n    datetime_format = \"%Y-%m-%d %H:%M:%S\",\n    # For saving env\n    persist_env = False,\n    env_persist_path = '../env_spec/environment.dill',\n    ## Logger settings\n    logger = None,\n    logger_name = 'Shouter',\n    loggerLvl = logging.DEBUG,\n    logger_format = '(%(asctime)s) : %(name)s : [%(levelname)s] : %(message)s'\n)\n\n</code></pre>"},{"location":"usage-examples/#2-basic-usage-like-logging","title":"2. Basic usage like logging","text":"<pre><code>shouter.debug(\n    # optional\n    dotline_length=30)\nshouter.debug(\"This is a debug message!\")\nshouter.info(\"This is an info message!\")\nshouter.warning(\"This is a warning message!\")\nshouter.error(\"This is an error message!\")\nshouter.fatal(\"This is a fatal message!\")\nshouter.critical(\"This is a critical message!\")\n</code></pre> <pre><code>(2024-01-17 19:24:45,319) : Shouter : [DEBUG] : ==============================\n\n\n(2024-01-17 19:24:45,320) : Shouter : [DEBUG] : This is a debug message!\n\n\n(2024-01-17 19:24:45,321) : Shouter : [INFO] : This is an info message!\n\n\n(2024-01-17 19:24:45,322) : Shouter : [WARNING] : This is a warning message!\n\n\n(2024-01-17 19:24:45,323) : Shouter : [ERROR] : This is an error message!\n\n\n(2024-01-17 19:24:45,324) : Shouter : [CRITICAL] : This is a fatal message!\n\n\n(2024-01-17 19:24:45,325) : Shouter : [CRITICAL] : This is a critical message!\n</code></pre>"},{"location":"usage-examples/#3-using-different-output-types","title":"3. Using different output types","text":"<pre><code># Different types of outputs\nshouter.info(output_type=\"dline\")\nshouter.info(output_type=\"HEAD1\", mess=\"Header Message\")\n</code></pre> <pre><code>(2024-01-17 19:24:45,367) : Shouter : [INFO] : ==================================================\n\n\n(2024-01-17 19:24:45,369) : Shouter : [INFO] : \n==================================================\n-----------------Header Message----------------- \n==================================================\n</code></pre>"},{"location":"usage-examples/#4-custom-logger-configuration","title":"4. Custom logger configuration","text":"<pre><code>import logging\n\n# Custom logger\ncustom_logger = logging.getLogger(\"CustomLogger\")\ncustom_logger.setLevel(logging.INFO)\n\n# Shouter with custom logger\nshouter_with_custom_logger = Shouter(supported_classes=(), logger=custom_logger)\nshouter_with_custom_logger.info(mess=\"Message with custom logger\")\n</code></pre> <pre><code>(2024-01-17 19:24:45,375) : CustomLogger : [INFO] : Message with custom logger\n</code></pre>"},{"location":"usage-examples/#5-backwards-compatibility-with-existing-loggers","title":"5. Backwards compatibility with existing loggers","text":"<pre><code>import logging\nimport attr #&gt;=22.2.0\n\n@attr.s\nclass ExampleClass:\n\n    # Logger settings\n    logger = attr.ib(default=None)\n    logger_name = attr.ib(default='Example Class')\n    loggerLvl = attr.ib(default=logging.DEBUG)\n    logger_format = attr.ib(default='(%(asctime)s) : %(name)s : [%(levelname)s] : %(message)s')\n\n    def __attrs_post_init__(self):\n        self.initialize_logger()\n\n    def initialize_logger(self):\n\n        \"\"\"\n        Initialize a logger for the class instance based on\n        the specified logging level and logger name.\n        \"\"\"\n\n        if self.logger is None:\n            logging.basicConfig(level=self.loggerLvl,format=self.logger_format)\n            logger = logging.getLogger(self.logger_name)\n            logger.setLevel(self.loggerLvl)\n\n            self.logger = logger\n\n    def print_debug(self):\n\n        self.logger.debug(\"This is a debug message!\")\n\n    def print_info(self):\n\n        self.logger.info(\"This is a info message!\")\n\n    def print_warning(self):\n\n        self.logger.warning(\"This is a warning message!\")\n\n    def print_error(self):\n\n        self.logger.error(\"This is a error message!\")\n\n    def print_critical(self):\n\n        self.logger.critical(\"This is a critical message!\")\n\n    def perform_action_chain_1(self):\n\n        self.logger.debug(\"Action 1\")\n        self.print_debug()\n\n        self.logger.debug(\"Action 2\")\n        self.print_error()\n\n    def perform_action_chain_2(self):\n\n        a = 1\n        b = 'b'\n        c = ['list']\n        d = {'key' : 'value'}\n        e = Shouter()\n\n        self.logger.error(\"Saving env\")\n</code></pre> <pre><code>ec = ExampleClass()\n\nec.print_debug()\nec.print_info()\nec.print_warning()\nec.print_error()\nec.print_critical()\n</code></pre> <pre><code>(2024-01-17 19:24:45,391) : Example Class : [DEBUG] : This is a debug message!\n\n\n(2024-01-17 19:24:45,392) : Example Class : [INFO] : This is a info message!\n\n\n(2024-01-17 19:24:45,392) : Example Class : [WARNING] : This is a warning message!\n\n\n(2024-01-17 19:24:45,393) : Example Class : [ERROR] : This is a error message!\n\n\n(2024-01-17 19:24:45,393) : Example Class : [CRITICAL] : This is a critical message!\n</code></pre> <pre><code>shouter_for_example_class = Shouter(\n    supported_classes = (ExampleClass),\n    tears_persist_path = '../env_spec/log_records.json'\n)\n\nec = ExampleClass(logger=shouter_for_example_class)\n\nec.print_debug()\nec.print_info()\nec.print_warning()\nec.print_error()\nec.print_critical()\nec.perform_action_chain_1()\n</code></pre> <pre><code>(2024-01-17 19:24:45,400) : Shouter : [DEBUG] : This is a debug message!\n\n\n(2024-01-17 19:24:45,401) : Shouter : [INFO] : This is a info message!\n\n\n(2024-01-17 19:24:45,401) : Shouter : [WARNING] : This is a warning message!\n\n\n(2024-01-17 19:24:45,402) : Shouter : [ERROR] : This is a error message!\n\n\n(2024-01-17 19:24:45,403) : Shouter : [CRITICAL] : This is a critical message!\n\n\n(2024-01-17 19:24:45,404) : Shouter : [DEBUG] : Action 1\n\n\n(2024-01-17 19:24:45,405) : Shouter : [DEBUG] : + This is a debug message!\n\n\n(2024-01-17 19:24:45,405) : Shouter : [DEBUG] : Action 2\n\n\n(2024-01-17 19:24:45,406) : Shouter : [ERROR] : + This is a error message!\n</code></pre>"},{"location":"usage-examples/#6-built-in-records-from-shouter-usage","title":"6. Built-in records from Shouter usage","text":"<pre><code>shouter_for_example_class = Shouter(\n    supported_classes = (ExampleClass),\n    tears_persist_path = '../env_spec/log_records.json'\n)\n\nec = ExampleClass(logger=shouter_for_example_class)\n\nec.print_debug()\nec.perform_action_chain_1()\n</code></pre> <pre><code>(2024-01-17 19:24:45,412) : Shouter : [DEBUG] : This is a debug message!\n\n\n(2024-01-17 19:24:45,413) : Shouter : [DEBUG] : Action 1\n\n\n(2024-01-17 19:24:45,414) : Shouter : [DEBUG] : + This is a debug message!\n\n\n(2024-01-17 19:24:45,414) : Shouter : [DEBUG] : Action 2\n\n\n(2024-01-17 19:24:45,415) : Shouter : [ERROR] : + This is a error message!\n</code></pre> <pre><code>ec.logger.return_logged_tears()\n</code></pre> <pre><code>[{'datetime': '2024-01-17 19:24:45',\n  'level': 'debug',\n  'function': 'ExampleClass.print_debug',\n  'mess': 'This is a debug message!',\n  'line': 32,\n  'lines': [32],\n  'traceback': ['ExampleClass.print_debug']},\n {'datetime': '2024-01-17 19:24:45',\n  'level': 'debug',\n  'function': 'ExampleClass.perform_action_chain_1',\n  'mess': 'Action 1',\n  'line': 52,\n  'lines': [52],\n  'traceback': ['ExampleClass.perform_action_chain_1']},\n {'datetime': '2024-01-17 19:24:45',\n  'level': 'debug',\n  'function': 'ExampleClass.perform_action_chain_1',\n  'mess': 'This is a debug message!',\n  'line': 53,\n  'lines': [32, 53],\n  'traceback': ['ExampleClass.print_debug',\n   'ExampleClass.perform_action_chain_1']},\n {'datetime': '2024-01-17 19:24:45',\n  'level': 'debug',\n  'function': 'ExampleClass.perform_action_chain_1',\n  'mess': 'Action 2',\n  'line': 55,\n  'lines': [55],\n  'traceback': ['ExampleClass.perform_action_chain_1']},\n {'datetime': '2024-01-17 19:24:45',\n  'level': 'error',\n  'function': 'ExampleClass.perform_action_chain_1',\n  'mess': 'This is a error message!',\n  'line': 56,\n  'lines': [44, 56],\n  'traceback': ['ExampleClass.print_error',\n   'ExampleClass.perform_action_chain_1']}]\n</code></pre> <pre><code>import pandas as pd\n\npd.DataFrame(ec.logger.return_logged_tears())\n</code></pre> datetime level function mess line lines traceback 0 2024-01-17 19:24:45 debug ExampleClass.print_debug This is a debug message! 32 [32] [ExampleClass.print_debug] 1 2024-01-17 19:24:45 debug ExampleClass.perform_action_chain_1 Action 1 52 [52] [ExampleClass.perform_action_chain_1] 2 2024-01-17 19:24:45 debug ExampleClass.perform_action_chain_1 This is a debug message! 53 [32, 53] [ExampleClass.print_debug, ExampleClass.perfor... 3 2024-01-17 19:24:45 debug ExampleClass.perform_action_chain_1 Action 2 55 [55] [ExampleClass.perform_action_chain_1] 4 2024-01-17 19:24:45 error ExampleClass.perform_action_chain_1 This is a error message! 56 [44, 56] [ExampleClass.print_error, ExampleClass.perfor..."},{"location":"usage-examples/#7-debugging-capabilities-of-shouter","title":"7. Debugging capabilities of Shouter","text":"<pre><code>shouter_for_example_class = Shouter(\n    supported_classes = (ExampleClass),\n    tears_persist_path = '../env_spec/log_records.json',\n    persist_env = True,\n    env_persist_path = '../env_spec/environment.dill'\n)\n\nec = ExampleClass(logger=shouter_for_example_class)\n\nec.print_debug()\nec.perform_action_chain_2()\n</code></pre> <pre><code>(2024-01-17 19:24:45,769) : Shouter : [DEBUG] : This is a debug message!\n\n\n(2024-01-17 19:24:45,769) : Shouter : [ERROR] : Saving env\n\n\n(2024-01-17 19:24:45,802) : Shouter : [WARNING] : Object 'self' could not have been serialized, when saving last words!\n</code></pre> <pre><code>ec.logger.return_last_words(\n    # optional\n    env_persist_path = '../env_spec/environment.dill'\n)\n</code></pre> <pre><code>{'a': 1,\n 'b': 'b',\n 'c': ['list'],\n 'd': {'key': 'value'},\n 'e': Shouter(supported_classes=(), dotline_length=50, auto_output_type_selection=True, tears_persist_path='log_records.json', env_persist_path='environment.dill', datetime_format='%Y-%m-%d %H:%M:%S', log_records=[], persist_env=False, logger=&lt;Logger Shouter (DEBUG)&gt;, logger_name='Shouter', loggerLvl=10, logger_format='(%(asctime)s) : %(name)s : [%(levelname)s] : %(message)s')}\n</code></pre>"}]}