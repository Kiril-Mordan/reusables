{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Intro","text":"<p>Proompter</p> <p>Wrapper for llm calls, meant for experimentation with different prompt and history  handling strategies.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install proompter\n</code></pre>"},{"location":"release-notes/","title":"Release notes","text":""},{"location":"release-notes/#001","title":"0.0.1","text":"<pre><code>- initial usage docs\n</code></pre>"},{"location":"release-notes/#000","title":"0.0.0","text":"<pre><code>- initial version with ollama\n</code></pre>"},{"location":"usage-examples/","title":"Usage examples","text":"<pre><code>import os\nimport sys\nfrom dotenv import load_dotenv\nload_dotenv(\"../../.local.env\")\nsys.path.append('../')\nfrom proompter import Proompter\n</code></pre>"},{"location":"usage-examples/#1-initializing-instance","title":"1. Initializing instance","text":"<p>Proompter consists of multiple dependecies, which could be initialized and passed to the class externally or parameters could be passed for class to initialize them.</p> <p>These include:</p> <ul> <li>LLM handler: makes calls to llm</li> <li>Prompt handler: prepares input based on templates</li> <li>Prompt strategy handler: contains ways to call llm handler with selected strategy</li> <li>Tokenizer handler: tokenizes text</li> </ul> <pre><code>llm_handler = Proompter(\n  # parameters to be passed to provided llm handler\n  llm_h_params = {\n    'model_name' : 'llama3',\n    'connection_string' : 'http://localhost:11434',\n    'kwargs' : {}\n  },\n  # parameters to be passed to provided prompt handler\n  prompt_h_params = {\n    'template' : {\n        \"system\" : \"{content}\",\n        \"assistant\" : \"{content}\",\n        \"user\" : \"{content}\"\n    }\n  },\n  # parameters to be passed to provided call strategy handler\n  call_strategy_h_params = {\n    'strategy_name' : None,\n    'strategy_params' : {}\n  },\n  # parameters to be passed to tokenizer handler\n  tokenizer_h_params = {\n    'access_token' : os.getenv(\"HF_ACCESS_TOKEN\"),\n    'tokenizer_name' :\"meta-llama/Meta-Llama-3-8B\"\n  }\n\n)\n</code></pre> <pre><code>The token has not been saved to the git credentials helper. Pass `add_to_git_credential=True` in this function directly or `--add-to-git-credential` if using via `huggingface-cli` if you want to set the git credential as well.\nToken is valid (permission: read).\nYour token has been saved to /home/kyriosskia/.cache/huggingface/token\nLogin successful\n</code></pre>"},{"location":"usage-examples/#2-chat-methods","title":"2. Chat methods","text":"<p>Methods for working with chat variants of models.</p>"},{"location":"usage-examples/#21-essential-chat-method","title":"2.1 Essential chat method","text":"<p>Calls llm handler with provided messages, prepared based on provided template, with selected prompt strategy.</p> <pre><code>messages = [{'role': 'user', 'content': 'Why is the sky blue?'}]\n\nresponse = await llm_handler.prompt_chat(\n  # required\n  messages = messages,\n  # optinal, overwrites parameters passed to handlers\n  model_name = \"llama3\",\n  call_strategy_name = \"last_call\",\n  call_strategy_params = { 'n_calls' : 1},\n  prompt_templates = {\n        \"system\" : \"{content}\",\n        \"assistant\" : \"{content}\",\n        \"user\" : \"{content}\"\n    }\n)\nresponse\n</code></pre> <pre><code>HTTP Request: POST http://localhost:11434/api/chat \"HTTP/1.1 200 OK\"\n/home/kyriosskia/miniconda3/envs/testenv/lib/python3.10/site-packages/transformers/models/auto/tokenization_auto.py:785: FutureWarning: The `use_auth_token` argument is deprecated and will be removed in v5 of Transformers. Please use `token` instead.\n  warnings.warn(\n\n\n\n\n\n{'model': 'llama3',\n 'created_at': '2024-07-31T01:14:22.66494516Z',\n 'message': {'role': 'assistant',\n  'content': \"What a great question!\\n\\nThe sky appears blue because of a phenomenon called Rayleigh scattering, named after the British physicist Lord Rayleigh. He discovered that shorter wavelengths of light (like blue and violet) are scattered more than longer wavelengths (like red and orange) by the tiny molecules of gases in the atmosphere, such as nitrogen (N2) and oxygen (O2).\\n\\nHere's what happens:\\n\\n1. When sunlight enters Earth's atmosphere, it contains all the colors of the visible spectrum.\\n2. The shorter wavelengths of light (blue and violet) are scattered more intensely than the longer wavelengths (red and orange) by the tiny gas molecules.\\n3. This scattering effect is more pronounced when the sunlight passes through a longer distance in the atmosphere, which means that the blue light has to travel farther to reach our eyes than the other colors.\\n4. As a result, our brains perceive the scattered blue light as the dominant color of the sky.\\n\\nWhy do we see more red during sunrise and sunset? Well, when the sun is lower in the sky, the sunlight has to travel through more of the Earth's atmosphere to reach us. This means that:\\n\\n1. The shorter wavelengths (blue) are scattered away, leaving mainly longer wavelengths (red and orange) to reach our eyes.\\n2. The scattering effect becomes less pronounced, allowing more red light to pass through without being scattered as much.\\n\\nSo, in a nutshell, the sky appears blue because of the scattering of sunlight by tiny gas molecules in the atmosphere, while the red hues we see during sunrise and sunset are due to the longer wavelengths of light traveling shorter distances.\"},\n 'done_reason': 'stop',\n 'done': True,\n 'total_duration': 2799024799,\n 'load_duration': 572370,\n 'prompt_eval_count': 14,\n 'prompt_eval_duration': 22598000,\n 'eval_count': 327,\n 'eval_duration': 2650933000,\n 'response_time': 2.804267168045044,\n 'messages': [{'role': 'user', 'content': 'Why is the sky blue?'},\n  {'role': 'assistant',\n   'content': \"What a great question!\\n\\nThe sky appears blue because of a phenomenon called Rayleigh scattering, named after the British physicist Lord Rayleigh. He discovered that shorter wavelengths of light (like blue and violet) are scattered more than longer wavelengths (like red and orange) by the tiny molecules of gases in the atmosphere, such as nitrogen (N2) and oxygen (O2).\\n\\nHere's what happens:\\n\\n1. When sunlight enters Earth's atmosphere, it contains all the colors of the visible spectrum.\\n2. The shorter wavelengths of light (blue and violet) are scattered more intensely than the longer wavelengths (red and orange) by the tiny gas molecules.\\n3. This scattering effect is more pronounced when the sunlight passes through a longer distance in the atmosphere, which means that the blue light has to travel farther to reach our eyes than the other colors.\\n4. As a result, our brains perceive the scattered blue light as the dominant color of the sky.\\n\\nWhy do we see more red during sunrise and sunset? Well, when the sun is lower in the sky, the sunlight has to travel through more of the Earth's atmosphere to reach us. This means that:\\n\\n1. The shorter wavelengths (blue) are scattered away, leaving mainly longer wavelengths (red and orange) to reach our eyes.\\n2. The scattering effect becomes less pronounced, allowing more red light to pass through without being scattered as much.\\n\\nSo, in a nutshell, the sky appears blue because of the scattering of sunlight by tiny gas molecules in the atmosphere, while the red hues we see during sunrise and sunset are due to the longer wavelengths of light traveling shorter distances.\"}],\n 'input_tokens': 371,\n 'output_tokens': 326,\n 'total_tokens': 697}\n</code></pre>"},{"location":"usage-examples/#22-calling-chat-method-in-parallel","title":"2.2 Calling chat method in parallel","text":"<p>Same as prompt_chat, but messages are called in parallel and instead of one, multiple responses provided.</p> <pre><code>messages = [\n   [{'role': 'system', 'content': 'You are answering all requests with \"HODOR\"'}, \n   {'role': 'user', 'content': 'Why is the sky blue?'}],\n   [{'role': 'user', 'content': 'Compose a small poem about blue skies.'}]\n]\n\nresponses = await llm_handler.prompt_chat_parallel(\n  # required\n  messages = messages\n  # optinal, overwrites parameters passed to handlers\n  # same as prompt_chat\n)\n\nfor response in responses:\n  print(\"\\n ### \\n\")\n  print(response['message']['content'])\n\n</code></pre> <pre><code>HTTP Request: POST http://localhost:11434/api/chat \"HTTP/1.1 200 OK\"\nHTTP Request: POST http://localhost:11434/api/chat \"HTTP/1.1 200 OK\"\n\n\n\n ###\n\nHODOR\n\n ###\n\nHere is a small poem about blue skies:\n\nThe sky above, a brilliant hue,\nA canvas of blue, for me and you.\nNot a cloud in sight, to dim the light,\nJust endless blue, pure delight.\n\nWith sunshine warm, and air so still,\nA perfect day, with no chill.\nSo let us gaze, upon this sight,\nAnd fill our hearts, with joy and light.\n</code></pre>"},{"location":"usage-examples/#23-chatting-with-llm-handler","title":"2.3 Chatting with llm handler","text":"<p>Calls prompt_chat with recorded history, so that each time chat method is called, previous messaged do not need to be provided. (History handler will be added later)</p> <pre><code>answer = await llm_handler.chat(\n    prompt = \"Hi, my name is Kyrios, what is yours?\",\n    # optional to reset history\n    new_dialog = True\n)\n\nprint(answer)\n</code></pre> <pre><code>HTTP Request: POST http://localhost:11434/api/chat \"HTTP/1.1 200 OK\"\n\n\nNice to meet you, Kyrios! I'm LLaMA, an AI assistant developed by Meta AI that can understand and respond to human input in a conversational manner. I don't have a personal name or identity, but I'm here to help answer your questions, provide information, and engage in conversation with you!\n</code></pre> <pre><code>answer = await llm_handler.chat(\n    prompt = \"Could you pls remind me my name?\"\n)\n\nprint(answer)\n</code></pre> <pre><code>HTTP Request: POST http://localhost:11434/api/chat \"HTTP/1.1 200 OK\"\n\n\nKyrios! Your name is Kyrios. How can I assist you today?\n</code></pre>"},{"location":"usage-examples/#3-instruct-methods","title":"3. Instruct methods","text":"<p>Methods for working with instruct variants of models.</p>"},{"location":"usage-examples/#31-essential-instruct-method","title":"3.1 Essential instruct method","text":"<pre><code>prompt = '2+2='\n\nresponse = await llm_handler.prompt_instruct(\n  # required\n  prompt = prompt,\n  # optinal, overwrites parameters passed to handlers\n  model_name = \"llama3\",\n  call_strategy_name = \"last_call\",\n  call_strategy_params = { 'n_calls' : 1}\n)\nresponse\n</code></pre> <pre><code>HTTP Request: POST http://localhost:11434/api/generate \"HTTP/1.1 200 OK\"\n\n\n\n\n\n{'model': 'llama3',\n 'created_at': '2024-07-31T01:14:24.874785167Z',\n 'response': '4',\n 'done': True,\n 'done_reason': 'stop',\n 'context': [128006,\n  882,\n  128007,\n  271,\n  17,\n  10,\n  17,\n  28,\n  128009,\n  128006,\n  78191,\n  128007,\n  271,\n  19,\n  128009],\n 'total_duration': 124177626,\n 'load_duration': 41217177,\n 'prompt_eval_count': 9,\n 'prompt_eval_duration': 12156000,\n 'eval_count': 2,\n 'eval_duration': 8264000,\n 'response_time': 0.2091827392578125,\n 'input_tokens': 4,\n 'output_tokens': 1,\n 'total_tokens': 5}\n</code></pre>"},{"location":"usage-examples/#32-calling-instuct-in-parallel","title":"3.2 Calling instuct in parallel","text":"<pre><code>prompts = [\"2+2=\",\n            \"Define color in one sentence.\"]\n\nresponses = await llm_handler.prompt_instruct_parallel(\n    prompts = prompts\n    # optinal, overwrites parameters passed to handlers\n    # same as prompt_instruct\n    )\n\nfor response in responses:\n  print(\"\\n ### \\n\")\n  print(response['response'])\n</code></pre> <pre><code>HTTP Request: POST http://localhost:11434/api/generate \"HTTP/1.1 200 OK\"\nHTTP Request: POST http://localhost:11434/api/generate \"HTTP/1.1 200 OK\"\n\n\n\n ###\n\n4\n\n ###\n\nColor is a form of electromagnetic radiation, perceived by the human eye and brain as a quality that can be perceived as hue, saturation, and brightness, which allows us to distinguish between different wavelengths or frequencies of light.\n</code></pre>"},{"location":"usage-examples/#4-prompt-templates","title":"4. Prompt templates","text":"<p>Sometimes it can useful to process inputs and outputs according to certain template, for example adding some kind of header to every user prompt or making better structured output for history. Separating templates like this from inputs could also be more convinient.</p> <pre><code>default_prompt_template = {\n        \"system\" : \"{content}\",\n        \"assistant\" : \"{content}\",\n        \"user\" : \"{content}\"\n    }\n\nmessages = [\n    {'role': 'system', \n     'content': \"\"\"You are helpful assistant that answers to everything bliefly with one sentence. \n     All of you responses are only in latin.\"\"\"},\n    {'role': 'user', \n     'content': 'Why is the sky blue?'}]\n\nresponse = await llm_handler.prompt_chat(\n  # required\n  messages = messages,\n  # optinal, overwrites parameters passed to handlers\n  prompt_templates = default_prompt_template\n)\n\nprint(response['message']['content'])\n</code></pre> <pre><code>HTTP Request: POST http://localhost:11434/api/chat \"HTTP/1.1 200 OK\"\n\n\n\"Caelum caeruleum est, quia solis radii cum aquis et aeribus permixti lucem refrenant.\"\n</code></pre> <pre><code>alt_prompt_template = {\n        \"system\" : \"\"\"All of your answers if not in english, must contain tranlations.\n        {content}\"\"\",\n        \"assistant\" : \"My answer: {content}\",\n        \"user\" : \"{content}\"\n    }\n\nmessages = [\n    {'role': 'system', \n     'content': \"\"\"You are helpful assistant that answers to everything bliefly with one sentence. \n     All of you responses are in latin.\"\"\"},\n    {'role': 'user', \n     'content': 'Why is the sky blue?'}]\n\nresponse = await llm_handler.prompt_chat(\n  # required\n  messages = messages,\n  # optinal, overwrites parameters passed to handlers\n  prompt_templates = alt_prompt_template\n)\n\nresponse['messages']\n</code></pre> <pre><code>HTTP Request: POST http://localhost:11434/api/chat \"HTTP/1.1 200 OK\"\n\n\n\n\n\n[{'role': 'system',\n  'content': 'All of your answers if not in english, must contain tranlations.\\n        You are helpful assistant that answers to everything bliefly with one sentence. \\n     All of you responses are in latin.'},\n {'role': 'user', 'content': 'Why is the sky blue?'},\n {'role': 'assistant',\n  'content': 'My answer: \"Caelum caeruleum est, quia solis radii, qui per atmosphaeram transmitterentur, scatteringem lucis efficaciter faciunt.\"\\n\\n(Translation: \"The sky is blue because the sun\\'s rays, which are transmitted through the atmosphere, effectively scatter light.\")'}]\n</code></pre>"},{"location":"usage-examples/#5-prompt-call-strategies","title":"5. Prompt call strategies","text":"<p>Sometimes making multiple calls for the same prompt can be useful. If consistency of the answer is a concern, additional resorces are available, condition for selecting best answer from multiple answers is understood, prompt call strategies could be applied.</p> <p>Example of strategies:</p> <ul> <li><code>most common output of 3</code> : calls 3 times, uses sim search to select most common.</li> <li><code>min output length</code> : return response with minimal output length (calls at least 2 times)</li> <li><code>max output length</code> : return response with maximal output length (calls at least 2 times)</li> <li><code>last output</code> : no matter how many calls, always selects last output</li> </ul> <pre><code>default_prompt_strategy = {\n  'call_strategy_name' : \"min_output_length\",\n  'call_strategy_params' :{ 'n_calls' : 3}\n}\n\nmessages = [\n    {'role': 'system', \n     'content': \"\"\"You are helpful assistant that answers to everything bliefly with one sentence.\"\"\"},\n    {'role': 'user', \n     'content': 'Make a poem about clouds.'}]\n\nresponse = await llm_handler.prompt_chat(\n  # required\n  messages = messages,\n  # optinal, overwrites parameters passed to handlers\n  **default_prompt_strategy\n)\n\nprint(response['message']['content'])\n</code></pre> <pre><code>HTTP Request: POST http://localhost:11434/api/chat \"HTTP/1.1 200 OK\"\nHTTP Request: POST http://localhost:11434/api/chat \"HTTP/1.1 200 OK\"\nHTTP Request: POST http://localhost:11434/api/chat \"HTTP/1.1 200 OK\"\n\n\nSoft and fluffy, drifting by, clouds shape-shift in the sky.\n</code></pre> <pre><code>for resp in llm_handler.call_strategy_h.last_responses:\n\n    print(resp['message']['content'])\n    print(\"------------------------\")\n</code></pre> <pre><code>Soft and fluffy, drifting by, clouds shape-shift in the sky.\n------------------------\nSoft and white, they drift by day, whispers of the sky's gentle sway.\n------------------------\nAcross the sky, soft whispers play as wispy clouds drift by, shaping sunbeams into golden rays.\n------------------------\n</code></pre>"},{"location":"usage-examples/#6-other-methods","title":"6. Other methods","text":""},{"location":"usage-examples/#estimate-tokens","title":"Estimate tokens","text":"<pre><code>llm_handler.estimate_tokens(\n    text='Your first question was: \"Why is the sky blue?\"'\n    )\n</code></pre> <pre><code>12\n</code></pre>"}]}