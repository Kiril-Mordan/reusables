name: Publish packages

on:
  workflow_dispatch:
  workflow_run:
      workflows: ["Update README"]
      types:
        - completed


jobs:

  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 15  # Fetches prev commits

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install jq

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Find Changed Modules
        id: changed-modules
        run: |
          # Directories to check, passed as arguments before the last two arguments
          directories_to_check=('python_modules/' 'example_notebooks/')

          # Output directory, passed as the second-to-last argument
          output_directory='python_modules/'

          # File extension to add, passed as the last argument
          extension_to_add='.py'

          # Function to check for changes in a given commit range
          check_changes() {
            local commit_range=$1
            local changed_files=""
            for dir in "${directories_to_check[@]}"; do
              if [ -n "$(git diff --name-only $commit_range | grep "$dir")" ]; then
                changed_files+=$(git diff --name-only $commit_range | grep "$dir")
                changed_files+=$'\n'
              fi
            done
            echo "$changed_files"
          }

          # Checking for changes in the last three commits
          for i in 1 2 3; do
            changed_files=$(check_changes "HEAD~$i HEAD~$((i-1))")
            if [ -n "$changed_files" ]; then
              break
            fi
            echo "No changes found between HEAD~$i and HEAD~$((i-1))."
          done

          if [ -z "$changed_files" ]; then
              echo "No changes found in the last three commits."
              exit 0
          else
              echo "Changed files:"
              echo "$changed_files"
              # Process files
              processed_files=$(echo "$changed_files" |
                                sed 's/.*\///' |       # Remove directory path
                                sed 's/\.[^.]*$//' |   # Remove file extensions
                                sort | uniq |         # Sort and deduplicate
                                awk -v dir="$output_directory" -v ext="$extension_to_add" '{print dir $0 ext}')  # Prepend directory and append extension
              echo "Processed files:"
              echo "$processed_files"
              echo "::set-output name=files::${processed_files}"
          fi


      - name: Create and activate virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel twine
          pip install -r env_spec/requirements.txt

      - name: Add Python Kernel
        run: python -m ipykernel install --user --name python3

      - name: Pull latest changes from the remote repository
        run: git pull origin main

      - name: Assemble and build package
        run: |
          echo "Assembling for:"
          echo ${{ steps.changed-modules.outputs.files }}
          echo "Assembling..."
          ./tools/make_package.sh ${{ steps.changed-modules.outputs.files }}
          ls -la

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
          ls -la
          python -m twine upload dist/*

      - name: Commit changes
        run: |
          set -x
          chmod +x tools/get_latest_package_version.sh

          PACKAGE_VERSION=$(./tools/get_latest_package_version.sh "${{ steps.changed-modules.outputs.files }}")
          if [ -z "${PACKAGE_VERSION}" ]; then
            echo "Failed to get version"
            exit 1
          fi

          FILE_BASENAME=$(basename "${{ steps.changed-modules.outputs.files }}")
          LABEL_NAME=$(basename "${{ steps.changed-modules.outputs.files }} .py")

          python tools/update_release_notes.py "$LABEL_NAME" "$PACKAGE_VERSION"

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git pull origin HEAD:main

          git add env_spec/lsts_package_versions.yml
          git add env_spec/version_logs.csv
          git add release_notes
          # Check if there are any changes in the working directory
          if [ -n "$(git status --porcelain)" ]; then
            COMMIT_MESSAGE="Update package version tracking files"
            TAG_NAME="v${PACKAGE_VERSION}_${FILE_BASENAME}"
            TAG_MESSAGE="${FILE_BASENAME}==${PACKAGE_VERSION}"

            git commit -m "${COMMIT_MESSAGE}"
            git tag -a "${TAG_NAME}" -m "${TAG_MESSAGE}"
            git push origin HEAD:main
            git push origin "${TAG_NAME}"
          else
            echo "No changes to commit"
          fi

