name: Update README

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
  workflow_run:
      workflows: ["Generate PlantUML Diagrams"]
      types:
        - completed

jobs:
  documentation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 4  # Fetches prev commits

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Find Changed Modules
        id: changed-modules
        run: |
          # Directories to check, passed as arguments before the last two arguments
          directories_to_check=('python_modules/' 'example_notebooks/')

          # Output directory, passed as the second-to-last argument
          output_directory='example_notebooks/'

          # File extension to add, passed as the last argument
          extension_to_add='.ipynb'

          # Function to check for changes in a given commit range
          check_changes() {
            local commit_range=$1
            local changed_files=""
            for dir in "${directories_to_check[@]}"; do
              if [ -n "$(git diff --name-only $commit_range | grep "$dir")" ]; then
                changed_files+=$(git diff --name-only $commit_range | grep "$dir")
                changed_files+=$'\n'
              fi
            done
            echo "$changed_files"
          }

          # Checking for changes in the last three commits
          for i in 1 2 3; do
            changed_files=$(check_changes "HEAD~$i HEAD~$((i-1))")
            if [ -n "$changed_files" ]; then
              break
            fi
            echo "No changes found between HEAD~$i and HEAD~$((i-1))."
          done

          if [ -z "$changed_files" ]; then
              echo "No changes found in the last three commits."
          else
              echo "Changed files:"
              echo "$changed_files"
              # Process files
              processed_files=$(echo "$changed_files" |
                                sed 's/.*\///' |       # Remove directory path
                                sed 's/\.[^.]*$//' |   # Remove file extensions
                                sort | uniq |         # Sort and deduplicate
                                awk -v dir="$output_directory" -v ext="$extension_to_add" '{print dir $0 ext}')  # Prepend directory and append extension
              echo "Processed files:"
              echo "$processed_files"
              echo "::set-output name=files::${processed_files}"
          fi

      - name: Download and install drawio
        run: |
          wget https://github.com/jgraph/drawio-desktop/releases/download/v13.0.3/draw.io-amd64-13.0.3.deb
          sudo dpkg -i draw.io-amd64-13.0.3.deb

      - name: Create and activate virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install python dependencies
        run: pip install -r env_spec/requirements.txt

      - name: Add Python Kernel
        run: python -m ipykernel install --user --name python3

      - name: Generate md files from jupyter for changed modules
        run: |
          ./tools/convert_ipynb_to_markdown.sh ${{ steps.changed-modules.outputs.files }}

      - name: Generate png files from drawio
        run: |
          ./tools/convert_drawio_to_png.sh

      - name: Update README.md
        run: |
          ./tools/update_README.sh

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git pull origin HEAD:main
          git add docs README.md
          # Check if there are any changes in the working directory
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Update README"
            git push
          else
            echo "No changes to commit"
          fi
