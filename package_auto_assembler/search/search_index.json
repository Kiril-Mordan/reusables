{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Intro","text":"<pre><code>pip install package-auto-assembler\n</code></pre>"},{"location":"flow/","title":"Flow","text":""},{"location":"release-notes/","title":"Release notes","text":""},{"location":"release-notes/#release-notes_1","title":"Release notes","text":""},{"location":"release-notes/#014","title":"0.1.4","text":""},{"location":"release-notes/#014_1","title":"0.1.4","text":"<pre><code>- test_install_package() method for local testing\n</code></pre>"},{"location":"release-notes/#013","title":"0.1.3","text":""},{"location":"release-notes/#013_1","title":"0.1.3","text":"<pre><code>- improved ReleaseNotesHandler with resistance to duplicate history\n</code></pre>"},{"location":"release-notes/#013_2","title":"0.1.3","text":"<pre><code>- improved ReleaseNotesHandler with resistance to duplicate history\n</code></pre>"},{"location":"release-notes/#012","title":"0.1.2","text":""},{"location":"release-notes/#012_1","title":"0.1.2","text":"<pre><code>- integration of pip-audit to check vulnerabilities\n</code></pre>"},{"location":"release-notes/#012_2","title":"0.1.2","text":"<pre><code>- integration of pip-audit to check vulnerabilities\n</code></pre>"},{"location":"release-notes/#011","title":"0.1.1","text":""},{"location":"release-notes/#011_1","title":"0.1.1","text":"<pre><code>- initial version with release notes handler\n</code></pre>"},{"location":"release-notes/#011_2","title":"0.1.1","text":"<pre><code>- initial version with release notes handler\n</code></pre>"},{"location":"release-notes/#011_3","title":"0.1.1","text":"<pre><code>- initial version with release notes handler\n</code></pre>"},{"location":"usage-examples/","title":"Package Auto Assembler","text":"<p>This tool is meant to streamline creation of single module packages. Its purpose is to automate as many aspects of python package creation as possible, to shorten a development cycle of reusable components, maintain certain standard of quality for reusable code. It provides tool to simplify the process of package creatrion to a point that it can be triggered automatically within ci/cd pipelines, with minimal preparations and requirements for new modules.</p> <pre><code>import sys\nsys.path.append('../')\nfrom python_modules.package_auto_assembler import (VersionHandler, \\\n    ImportMappingHandler, RequirementsHandler, MetadataHandler, \\\n        LocalDependaciesHandler, LongDocHandler, SetupDirHandler, \\\n            ReleaseNotesHandler, PackageAutoAssembler)\n</code></pre>"},{"location":"usage-examples/#usage-examples","title":"Usage examples","text":"<p>The examples contain:  1. package versioning 2. import mapping 3. extracting and merging requirements 4. preparing metadata 5. merging local dependacies into single module 6. prepare README 7. assembling setup directory 8. making a package 9. creating release notes from commit messages</p>"},{"location":"usage-examples/#1-package-versioning","title":"1. Package versioning","text":""},{"location":"usage-examples/#initialize-versionhandler","title":"Initialize VersionHandler","text":"<pre><code>pv = VersionHandler(\n    # required\n    versions_filepath = '../tests/package_auto_assembler/lsts_package_versions.yml',\n    log_filepath = '../tests/package_auto_assembler/version_logs.csv',\n    # optional\n    default_version = \"0.0.1\")\n</code></pre>"},{"location":"usage-examples/#add-new-package","title":"Add new package","text":"<pre><code>pv.add_package(\n    package_name = \"new_package\",\n    # optional\n    version = \"0.0.1\"\n)\n</code></pre>"},{"location":"usage-examples/#update-package-version","title":"Update package version","text":"<pre><code>pv.increment_patch(\n    package_name = \"new_package\"\n)\n## for not tracked package\npv.increment_patch(\n    package_name = \"another_new_package\",\n    # optional\n    default_version = \"0.0.1\"\n)\n</code></pre> <pre><code>There are no known versions of 'another_new_package', 0.0.1 will be used!\n</code></pre>"},{"location":"usage-examples/#display-current-versions-and-logs","title":"Display current versions and logs","text":"<pre><code>pv.get_versions(\n    # optional\n    versions_filepath = '../tests/package_auto_assembler/lsts_package_versions.yml'\n)\n</code></pre> <pre><code>{'another_new_package': '0.0.1',\n 'example_module': '0.0.1',\n 'new_package': '0.0.2'}\n</code></pre> <pre><code>pv.get_version(\n    package_name='new_package'\n)\n</code></pre> <pre><code>'0.0.2'\n</code></pre> <pre><code>pv.get_logs(\n    # optional\n    log_filepath = '../tests/package_auto_assembler/version_logs.csv'\n)\n</code></pre> Timestamp Package Version 0 2024-01-06 00:54:04 example_module 0.0.1 1 2024-05-22 01:06:54 new_package 0.0.1 2 2024-05-22 01:06:54 new_package 0.0.2 3 2024-05-22 01:06:54 another_new_package 0.0.1"},{"location":"usage-examples/#flush-versions-and-logs","title":"Flush versions and logs","text":"<pre><code>pv.flush_versions()\npv.flush_logs()\n</code></pre>"},{"location":"usage-examples/#2-import-mapping","title":"2. Import mapping","text":""},{"location":"usage-examples/#initialize-importmappinghandler","title":"Initialize ImportMappingHandler","text":"<pre><code>im = ImportMappingHandler(\n    # required\n    mapping_filepath = \"../env_spec/package_mapping.json\"\n)\n</code></pre>"},{"location":"usage-examples/#load-package-mappings","title":"Load package mappings","text":"<pre><code>im.load_package_mappings(\n    # optional\n    mapping_filepath = \"../env_spec/package_mapping.json\"\n)\n</code></pre> <pre><code>{'PIL': 'Pillow',\n 'bs4': 'beautifulsoup4',\n 'fitz': 'PyMuPDF',\n 'attr': 'attrs',\n 'dotenv': 'python-dotenv',\n 'googleapiclient': 'google-api-python-client',\n 'google_auth_oauthlib': 'google-auth-oauthlib',\n 'sentence_transformers': 'sentence-transformers',\n 'flask': 'Flask',\n 'stdlib_list': 'stdlib-list',\n 'sklearn': 'scikit-learn',\n 'yaml': 'pyyaml',\n 'package_auto_assembler': 'package-auto-assembler'}\n</code></pre>"},{"location":"usage-examples/#3-extracting-and-merging-requirements","title":"3. Extracting and merging requirements","text":""},{"location":"usage-examples/#initialize-requirementshandler","title":"Initialize RequirementsHandler","text":"<pre><code>rh = RequirementsHandler(\n    # optional/required later\n    module_filepath = \"../tests/package_auto_assembler/example_module.py\",\n    package_mappings = {'PIL': 'Pillow',\n                        'bs4': 'beautifulsoup4',\n                        'fitz': 'PyMuPDF',\n                        'attr': 'attrs',\n                        'dotenv': 'python-dotenv',\n                        'googleapiclient': 'google-api-python-client',\n                        'sentence_transformers': 'sentence-transformers',\n                        'flask': 'Flask',\n                        'stdlib_list': 'stdlib-list',\n                        'sklearn': 'scikit-learn',\n                        'yaml': 'pyyaml'},\n    requirements_output_path = \"../tests/package_auto_assembler/\",\n    output_requirements_prefix = \"requirements_\",\n    custom_modules_filepath = \"../tests/package_auto_assembler/dependancies\",\n    python_version = '3.8'\n)\n</code></pre>"},{"location":"usage-examples/#list-custom-modules-for-a-given-directory","title":"List custom modules for a given directory","text":"<pre><code>rh.list_custom_modules(\n    # optional\n    custom_modules_filepath=\"../tests/package_auto_assembler/dependancies\"\n)\n</code></pre> <pre><code>['example_local_dependacy_1', 'example_local_dependacy_2']\n</code></pre>"},{"location":"usage-examples/#check-if-module-is-a-standard-python-library","title":"Check if module is a standard python library","text":"<pre><code>rh.is_standard_library(\n    # required\n    module_name = 'example_local_dependacy_1',\n    # optional\n    python_version = '3.8'\n)\n</code></pre> <pre><code>False\n</code></pre> <pre><code>rh.is_standard_library(\n    # required\n    module_name = 'logging',\n    # optional\n    python_version = '3.8'\n)\n</code></pre> <pre><code>True\n</code></pre>"},{"location":"usage-examples/#extract-requirements-from-the-module-file","title":"Extract requirements from the module file","text":"<pre><code>rh.extract_requirements(\n    # optional\n    module_filepath = \"../tests/package_auto_assembler/example_module.py\",\n    custom_modules = ['example_local_dependacy_2', 'example_local_dependacy_1'],\n    package_mappings = {'PIL': 'Pillow',\n                        'bs4': 'beautifulsoup4',\n                        'fitz': 'PyMuPDF',\n                        'attr': 'attrs',\n                        'dotenv': 'python-dotenv',\n                        'googleapiclient': 'google-api-python-client',\n                        'sentence_transformers': 'sentence-transformers',\n                        'flask': 'Flask',\n                        'stdlib_list': 'stdlib-list',\n                        'sklearn': 'scikit-learn',\n                        'yaml': 'pyyaml'},\n    python_version = '3.8'\n)\n</code></pre> <pre><code>['### example_module.py', 'attrs&gt;=22.2.0']\n</code></pre>"},{"location":"usage-examples/#audit-dependencies","title":"Audit dependencies","text":"<pre><code>rh.check_vulnerabilities(\n    # optional if ran extract_requirements() before\n    requirements_list = None,\n    raise_error = True\n)\n</code></pre> <pre><code>No known vulnerabilities found\n</code></pre> <pre><code>rh.vulnerabilities\n</code></pre> <pre><code>[]\n</code></pre> <pre><code>try:\n    rh.check_vulnerabilities(\n        # optional if ran extract_requirements() before\n        requirements_list = ['attrs&gt;=22.2.0', 'pandas', 'hnswlib==0.7.0'],\n        raise_error = True\n    )\nexcept Exception as e:\n    print(f\"Error: {e}\")\n</code></pre> <pre><code>Found 1 known vulnerability in 1 package\n\n\n\nName    Version ID                  Fix Versions\n------- ------- ------------------- ------------\nhnswlib 0.7.0   GHSA-xwc8-rf6m-xr86\n\nError: Found vulnerabilities, resolve them or ignore check to move forwards!\n</code></pre> <pre><code>rh.vulnerabilities\n</code></pre> <pre><code>[{'name': 'hnswlib',\n  'version': '0.7.0',\n  'id': 'GHSA-xwc8-rf6m-xr86',\n  'fix_versions': None}]\n</code></pre>"},{"location":"usage-examples/#save-requirements-to-a-file","title":"Save requirements to a file","text":"<pre><code>rh.write_requirements_file(\n    # optional/required later\n    module_name = 'example_module',\n    requirements = ['### example_module.py', 'attrs&gt;=22.2.0'],\n    output_path = \"../tests/package_auto_assembler/\",\n    prefix = \"requirements_\"\n)\n</code></pre>"},{"location":"usage-examples/#read-requirements","title":"Read requirements","text":"<pre><code>rh.read_requirements_file(\n    # required\n    requirements_filepath = \"../tests/package_auto_assembler/requirements_example_module.txt\"\n)\n</code></pre> <pre><code>['attrs&gt;=22.2.0']\n</code></pre>"},{"location":"usage-examples/#4-preparing-metadata","title":"4. Preparing metadata","text":""},{"location":"usage-examples/#initializing-metadatahandler","title":"Initializing MetadataHandler","text":"<pre><code>mh = MetadataHandler(\n    # optional/required later\n    module_filepath = \"../tests/package_auto_assembler/example_module.py\"\n)\n</code></pre>"},{"location":"usage-examples/#check-if-metadata-is-available","title":"Check if metadata is available","text":"<pre><code>mh.is_metadata_available(\n    # optional\n    module_filepath = \"../tests/package_auto_assembler/example_module.py\"\n)\n</code></pre> <pre><code>True\n</code></pre>"},{"location":"usage-examples/#extract-metadata-from-module","title":"Extract metadata from module","text":"<pre><code>mh.get_package_metadata(\n    # optional\n    module_filepath = \"../tests/package_auto_assembler/example_module.py\"\n)\n</code></pre> <pre><code>{'author': 'Kyrylo Mordan',\n 'author_email': 'parachute.repo@gmail.com',\n 'version': '0.0.1',\n 'description': 'A mock handler for simulating a vector database.',\n 'keywords': ['python', 'vector database', 'similarity search']}\n</code></pre>"},{"location":"usage-examples/#5-merging-local-dependacies-into-single-module","title":"5. Merging local dependacies into single module","text":""},{"location":"usage-examples/#initializing-localdependacieshandler","title":"Initializing LocalDependaciesHandler","text":"<pre><code>ldh = LocalDependaciesHandler(\n    # required\n    main_module_filepath = \"../tests/package_auto_assembler/example_module.py\",\n    dependencies_dir = \"../tests/package_auto_assembler/dependancies/\",\n    # optional\n    save_filepath = \"./combined_example_module.py\"\n)\n</code></pre>"},{"location":"usage-examples/#combine-main-module-with-dependacies","title":"Combine main module with dependacies","text":"<pre><code>print(ldh.combine_modules(\n    # optional\n    main_module_filepath = \"../tests/package_auto_assembler/example_module.py\",\n    dependencies_dir = \"../tests/package_auto_assembler/dependancies/\",\n    add_empty_design_choices = False\n)[0:1000])\n</code></pre> <pre><code>\"\"\"\nMock Vector Db Handler\n\nThis class is a mock handler for simulating a vector database, designed primarily for testing and development scenarios.\nIt offers functionalities such as text embedding, hierarchical navigable small world (HNSW) search,\nand basic data management within a simulated environment resembling a vector database.\n\"\"\"\n\nimport logging\nimport json\nimport time\nimport attr #&gt;=22.2.0\nimport string\nimport os\nimport csv\n\n__design_choices__ = {}\n\n# Metadata for package creation\n\n\n@attr.s\nclass ComparisonFrame:\n\n    \"\"\"\n    Compares query:response pairs expected vs recieved with semantic similarity\n    and simple metrics of word count, line count etc.\n\n    ...\n\n    Attributes\n    ----------\n    embedder : SentenceTransformer\n        The model used to generate embeddings for semantic comparison.\n    record_file : str\n        The name of the CSV file where queries and expected results are stored.\n    results_file : str\n        The name of the CSV file where comparison results\n</code></pre> <pre><code>ldh.dependencies_names_list\n</code></pre> <pre><code>['example_local_dependacy_1', 'example_local_dependacy_2']\n</code></pre>"},{"location":"usage-examples/#save-combined-module","title":"Save combined module","text":"<pre><code>ldh.save_combined_modules(\n    # optional\n    combined_module = ldh.combine_modules(),\n    save_filepath = \"./combined_example_module.py\"\n)\n</code></pre>"},{"location":"usage-examples/#6-prepare-readme","title":"6. Prepare README","text":"<pre><code>import logging\nldh = LongDocHandler(\n    # optional/required later\n    notebook_path = \"../tests/package_auto_assembler/example_module.ipynb\",\n    markdown_filepath = \"../example_module.md\",\n    timeout = 600,\n    kernel_name = 'python3',\n    # logger\n    loggerLvl = logging.DEBUG\n)\n</code></pre>"},{"location":"usage-examples/#convert-notebook-to-md-without-executing","title":"Convert notebook to md without executing","text":"<pre><code>ldh.convert_notebook_to_md(\n    # optional\n    notebook_path = \"../tests/package_auto_assembler/example_module.ipynb\",\n    output_path = \"../example_module.md\"\n)\n</code></pre> <pre><code>Converted ../tests/package_auto_assembler/example_module.ipynb to ../example_module.md\n</code></pre>"},{"location":"usage-examples/#convert-notebook-to-md-with-executing","title":"Convert notebook to md with executing","text":"<pre><code>ldh.convert_and_execute_notebook_to_md(\n    # optional\n    notebook_path = \"../tests/package_auto_assembler/example_module.ipynb\",\n    output_path = \"../example_module.md\",\n    timeout = 600,\n    kernel_name = 'python3'\n)\n</code></pre> <pre><code>Converted and executed ../tests/package_auto_assembler/example_module.ipynb to ../example_module.md\n</code></pre>"},{"location":"usage-examples/#return-long-description","title":"Return long description","text":"<pre><code>long_description = ldh.return_long_description(\n    # optional\n    markdown_filepath = \"../example_module.md\"\n)\n</code></pre>"},{"location":"usage-examples/#7-assembling-setup-directory","title":"7. Assembling setup directory","text":""},{"location":"usage-examples/#initializing-setupdirhandler","title":"Initializing SetupDirHandler","text":"<pre><code>sdh = SetupDirHandler(\n    # required\n    module_filepath = \"../tests/package_auto_assembler/example_module.py\",\n    # optional/ required\n    module_name = \"example_module\",\n    metadata = {'author': 'Kyrylo Mordan',\n                'version': '0.0.1',\n                'description': 'Example module.',\n                'long_description' : long_description,\n                'keywords': ['python']},\n    requirements = ['attrs&gt;=22.2.0'],\n    classifiers = ['Development Status :: 3 - Alpha',\n                   'Intended Audience :: Developers',\n                   'Intended Audience :: Science/Research',\n                   'Programming Language :: Python :: 3',\n                   'Programming Language :: Python :: 3.9',\n                   'Programming Language :: Python :: 3.10',\n                   'Programming Language :: Python :: 3.11',\n                   'License :: OSI Approved :: MIT License',\n                   'Topic :: Scientific/Engineering'],\n    setup_directory = \"./example_setup_dir\"\n)\n</code></pre>"},{"location":"usage-examples/#create-empty-setup-dir","title":"Create empty setup dir","text":"<pre><code>sdh.flush_n_make_setup_dir(\n    # optional\n    setup_directory = \"./example_setup_dir\"\n)\n</code></pre>"},{"location":"usage-examples/#copy-module-to-setup-dir","title":"Copy module to setup dir","text":"<pre><code>sdh.copy_module_to_setup_dir(\n    # optional\n    module_filepath = \"./combined_example_module.py\",\n    setup_directory = \"./example_setup_dir\"\n)\n</code></pre>"},{"location":"usage-examples/#create-init-file","title":"Create init file","text":"<pre><code>sdh.create_init_file(\n    # optional\n    module_name = \"example_module\",\n    setup_directory = \"./example_setup_dir\"\n)\n</code></pre>"},{"location":"usage-examples/#create-setup-file","title":"Create setup file","text":"<pre><code>sdh.write_setup_file(\n    # optional\n    module_name = \"example_module\",\n    metadata = {'author': 'Kyrylo Mordan',\n                'version': '0.0.1',\n                'description': 'Example Module',\n                'keywords': ['python']},\n    requirements = ['attrs&gt;=22.2.0'],\n    classifiers = ['Development Status :: 3 - Alpha',\n                   'Intended Audience :: Developers',\n                   'Intended Audience :: Science/Research',\n                   'Programming Language :: Python :: 3',\n                   'Programming Language :: Python :: 3.9',\n                   'Programming Language :: Python :: 3.10',\n                   'Programming Language :: Python :: 3.11',\n                   'License :: OSI Approved :: MIT License',\n                   'Topic :: Scientific/Engineering'],\n    setup_directory = \"./example_setup_dir\"\n)\n</code></pre>"},{"location":"usage-examples/#8-making-a-package","title":"8. Making a package","text":""},{"location":"usage-examples/#initializing-packageautoassembler","title":"Initializing PackageAutoAssembler","text":"<pre><code>paa = PackageAutoAssembler(\n    # required\n    module_name = \"example_module\",\n    module_filepath  = \"../tests/package_auto_assembler/example_module.py\",\n    # optional\n    mapping_filepath = \"../env_spec/package_mapping.json\",\n    dependencies_dir = \"../tests/package_auto_assembler/dependancies/\",\n    example_notebook_path = \"./mock_vector_database.ipynb\",\n    versions_filepath = '../tests/package_auto_assembler/lsts_package_versions.yml',\n    log_filepath = '../tests/package_auto_assembler/version_logs.csv',\n    setup_directory = \"./example_module\",\n    classifiers = ['Development Status :: 3 - Alpha',\n                    'Intended Audience :: Developers',\n                    'Intended Audience :: Science/Research',\n                    'Programming Language :: Python :: 3',\n                    'Programming Language :: Python :: 3.9',\n                    'Programming Language :: Python :: 3.10',\n                    'Programming Language :: Python :: 3.11',\n                    'License :: OSI Approved :: MIT License',\n                    'Topic :: Scientific/Engineering'],\n    requirements_list = [],\n    execute_readme_notebook = True,\n    python_version = \"3.8\",\n    version_increment_type = \"patch\",\n    default_version = \"0.0.1\",\n    check_vulnerabilities = True\n)\n</code></pre>"},{"location":"usage-examples/#add-metadata-from-module","title":"Add metadata from module","text":"<pre><code>paa.add_metadata_from_module(\n    # optional\n    module_filepath  = \"../tests/package_auto_assembler/example_module.py\"\n)\n</code></pre>"},{"location":"usage-examples/#add-or-update-version","title":"Add or update version","text":"<pre><code>paa.add_or_update_version(\n    # optional\n    module_name = \"example_module\",\n    version_increment_type = \"patch\",\n    version = \"0.0.1\",\n    versions_filepath = '../tests/package_auto_assembler/lsts_package_versions.yml',\n    log_filepath = '../tests/package_auto_assembler/version_logs.csv'\n)\n</code></pre> <pre><code>There are no known versions of 'example_module', 0.0.1 will be used!\n</code></pre>"},{"location":"usage-examples/#prepare-setup-directory","title":"Prepare setup directory","text":"<pre><code>paa.prep_setup_dir()\n</code></pre>"},{"location":"usage-examples/#merge-local-dependacies","title":"Merge local dependacies","text":"<pre><code>paa.merge_local_dependacies(\n    # optional\n    main_module_filepath = \"../tests/package_auto_assembler/example_module.py\",\n    dependencies_dir= \"../tests/package_auto_assembler/dependancies/\",\n    save_filepath = \"./example_module/example_module.py\"\n)\n</code></pre>"},{"location":"usage-examples/#add-requirements-from-module","title":"Add requirements from module","text":"<pre><code>paa.add_requirements_from_module(\n    # optional\n    module_filepath = \"../tests/package_auto_assembler/example_module.py\",\n    import_mappings = {'PIL': 'Pillow',\n                        'bs4': 'beautifulsoup4',\n                        'fitz': 'PyMuPDF',\n                        'attr': 'attrs',\n                        'dotenv': 'python-dotenv',\n                        'googleapiclient': 'google-api-python-client',\n                        'sentence_transformers': 'sentence-transformers',\n                        'flask': 'Flask',\n                        'stdlib_list': 'stdlib-list',\n                        'sklearn': 'scikit-learn',\n                        'yaml': 'pyyaml'}\n)\n</code></pre> <pre><code>No known vulnerabilities found\n</code></pre> <pre><code>paa.requirements_list\n</code></pre> <pre><code>['### example_module.py', 'attrs&gt;=22.2.0']\n</code></pre>"},{"location":"usage-examples/#make-readme-out-of-example-notebook","title":"Make README out of example notebook","text":"<pre><code>paa.add_readme(\n    # optional\n    example_notebook_path = \"../tests/package_auto_assembler/example_module.ipynb\",\n    output_path = \"./example_module/README.md\",\n    execute_notebook=False,\n)\n</code></pre>"},{"location":"usage-examples/#prepare-setup-file","title":"Prepare setup file","text":"<pre><code>paa.prep_setup_file(\n    # optional\n    metadata = {'author': 'Kyrylo Mordan',\n                'version': '0.0.1',\n                'description': 'Example module',\n                'keywords': ['python']},\n    requirements = ['### example_module.py',\n                    'attr&gt;=22.2.0'],\n    classifiers = ['Development Status :: 3 - Alpha',\n                    'Intended Audience :: Developers',\n                    'Intended Audience :: Science/Research',\n                    'Programming Language :: Python :: 3',\n                    'Programming Language :: Python :: 3.9',\n                    'Programming Language :: Python :: 3.10',\n                    'Programming Language :: Python :: 3.11',\n                    'License :: OSI Approved :: MIT License',\n                    'Topic :: Scientific/Engineering']\n\n)\n</code></pre>"},{"location":"usage-examples/#make-package","title":"Make package","text":"<pre><code>paa.make_package(\n    # optional\n    setup_directory = \"./example_module\"\n)\n</code></pre> <pre><code>CompletedProcess(args=['python', './example_module/setup.py', 'sdist', 'bdist_wheel'], returncode=1, stdout='', stderr=\"usage: setup.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]\\n   or: setup.py --help [cmd1 cmd2 ...]\\n   or: setup.py --help-commands\\n   or: setup.py cmd --help\\n\\nerror: invalid command 'bdist_wheel'\\n\")\n</code></pre>"},{"location":"usage-examples/#9-creating-release-notes-from-commit-messages","title":"9. Creating release notes from commit messages","text":"<pre><code>rnh = ReleaseNotesHandler(\n    # path to existing or new release notes file\n    filepath = '../tests/package_auto_assembler/release_notes.md',\n    # name of label in commit message [example_module] for filter\n    label_name = 'example_module',\n    # new version to be used in release notes\n    version = '0.0.2'\n)\n</code></pre> <pre><code>No relevant commit messages found!\n\n\n..trying depth 2 !\n\n\nNo relevant commit messages found!\n\n\nNo messages to clean were provided\n</code></pre>"},{"location":"usage-examples/#-overwritting-commit-messages-from-example","title":"- overwritting commit messages from example","text":"<pre><code># commit messages from last merge\nrnh.commit_messages\n</code></pre> <pre><code>['Update requirements',\n '[package_auto_assembler] test_install_package() method for local testing',\n 'simpler test_install_package.py script',\n 'Update package version tracking files',\n 'Update README',\n 'Update requirements']\n</code></pre> <pre><code>example_commit_messages = [\n    '[example_module] usage example for initial release notes; bugfixes for RNH',\n    '[BUGFIX] missing parameterframe usage example and reduntant png file',\n    '[example_module] initial release notes handler',\n    'Update README',\n    'Update requirements'\n]\nrnh.commit_messages = example_commit_messages\n</code></pre>"},{"location":"usage-examples/#-internal-methods-that-run-on-intialiazation-of-releasenoteshandler","title":"- internal methods that run on intialiazation of ReleaseNotesHandler","text":"<pre><code># get messages relevant only for label\nrnh._filter_commit_messages_by_package()\nprint(\"Example filtered_messaged:\")\nprint(rnh.filtered_messages)\n# clean messages\nrnh._clean_and_split_commit_messages()\nprint(\"Example processed_messages:\")\nprint(rnh.processed_messages)\n# augment existing release note with new entries or create new\nrnh._create_release_note_entry()\nprint(\"Example processed_note_entries:\")\nprint(rnh.processed_note_entries)\n</code></pre> <pre><code>Example filtered_messaged:\n['[example_module] usage example for initial release notes; bugfixes for RNH', '[example_module] initial release notes handler']\nExample processed_messages:\n['usage example for initial release notes', 'bugfixes for RNH', 'initial release notes handler']\nExample processed_note_entries:\n['# Release notes\\n', '\\n', '### 0.0.2\\n', '\\n', '    - usage example for initial release notes\\n', '\\n', '    - bugfixes for RNH\\n', '\\n', '    - initial release notes handler\\n', '\\n', '### 0.0.1\\n', '\\n', '    - initial version of example_module\\n']\n</code></pre>"},{"location":"usage-examples/#-saving-updated-relese-notes","title":"- saving updated relese notes","text":"<pre><code>rnh.existing_contents\n</code></pre> <pre><code>['# Release notes\\n',\n '\\n',\n '### 0.0.1\\n',\n '    - initial version of example_module\\n']\n</code></pre> <pre><code>rnh.save_release_notes()\n</code></pre> <pre><code># updated content\nrnh.get_release_notes_content()\n</code></pre> <pre><code>['# Release notes\\n',\n '\\n',\n '### 0.0.2\\n',\n '\\n',\n '    - usage example for initial release notes\\n',\n '\\n',\n '    - bugfixes for RNH\\n',\n '\\n',\n '    - initial release notes handler\\n',\n '\\n',\n '### 0.0.1\\n',\n '\\n',\n '    - initial version of example_module\\n']\n</code></pre>"},{"location":"usage/","title":"Usage","text":""}]}