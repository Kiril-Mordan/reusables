{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Intro","text":"<p>Package auto assembler is a tool that meant to streamline creation of single module packages. Its purpose is to automate as many aspects of python package creation as possible, to shorten a development cycle of reusable components, maintain certain standard of quality for reusable code. It provides tool to simplify the process of package creatrion to a point that it can be triggered automatically within ci/cd pipelines, with minimal preparations and requirements for new modules.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install package-auto-assembler\n</code></pre>"},{"location":"cli/","title":"Cli","text":"<pre><code>paa --help\n</code></pre> <pre><code>Usage: paa [OPTIONS] COMMAND [ARGS]...\n\n  Package Auto Assembler CLI tool.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  check-vulnerabilities  Check vulnerabilities of the module.\n  init-config            Initialize config file\n  make-package           Package with package-auto-assembler.\n  test-install           Test install module into local environment.\n</code></pre> <p>Creating config file could be useful to avoid providing parameters manually. If no config file will be provided, by default values from <code>.paa.config</code> will be used.</p> <pre><code>paa init-config  --help\n</code></pre> <pre><code>Usage: paa init-config [OPTIONS]\n\n  Initialize config file\n\nOptions:\n  --help  Show this message and exit.\n</code></pre> <p>Making package based on provided parameters can be useful in ci/cd pipelines to streamline creation of packages before publishing from something that could be as simple as <code>.py</code> file.</p> <pre><code>paa make-package --help\n</code></pre> <pre><code>Usage: paa make-package [OPTIONS] MODULE_NAME\n\n  Package with package-auto-assembler.\n\nOptions:\n  --config TEXT                   Path to config file for paa.\n  --module-filepath TEXT          Path to .py file to be packaged.\n  --mapping-filepath TEXT         Path to .json file that maps import to\n                                  install dependecy names.\n  --cli-module-filepath TEXT      Path to .py file that contains cli logic.\n  --dependencies-dir TEXT         Path to directory with local dependencies of\n                                  the module.\n  --kernel-name TEXT              Kernel name.\n  --python-version TEXT           Python version.\n  --default-version TEXT          Default version.\n  --ignore-vulnerabilities-check  If checked, does not check module\n                                  dependencies with pip-audit for\n                                  vulnerabilities.\n  --example-notebook-path TEXT    Path to .ipynb file to be used as README.\n  --execute-notebook              If checked, executes notebook before turning\n                                  into README.\n  --log-filepath TEXT             Path to logfile to record version change.\n  --versions-filepath TEXT        Path to file where latest versions of the\n                                  packages are recorded.\n  --help                          Show this message and exit.\n</code></pre> <p>Installing packages for a test in local environemnts could be a useful step to make sure everything works as expected before pushing changes to publishing repo. This creates an instance of the package in local environment with default version, with a greatly simplified building process that avoids making documentationm, versioning and so on.</p> <pre><code>paa test-install [OPTIONS] MODULE_NAME\n</code></pre> <pre><code>Usage: paa test-install [OPTIONS] MODULE_NAME\n\n  Test install module for .py file in local environment\n\nOptions:\n  --config TEXT                Path to config file for paa.\n  --module-filepath TEXT       Path to .py file to be packaged.\n  --mapping-filepath TEXT      Path to .json file that maps import to install\n                               dependecy names.\n  --cli-module-filepath TEXT   Path to .py file that contains cli logic.\n  --dependencies-dir TEXT      Path to directory with local dependencies of\n                               the module.\n  --default-version TEXT       Default version.\n  --check-vulnerabilities      If checked, checks module dependencies with\n                               pip-audit for vulnerabilities.\n  --keep-temp-files            If checked, setup directory won't be removed\n                               after setup is done.\n  --help                       Show this message and exit.\n</code></pre> <p>Checking vulnerabilities with <code>pip-audit</code> is usefull. This checks vulnerabilities of .py files and its local dependencies with <code>pip-audit</code>.</p> <pre><code>paa check-vulnerabilities --help\n</code></pre> <pre><code>Usage: paa check-vulnerabilities [OPTIONS] MODULE_NAME\n\n  Check vulnerabilities of the module.\n\nOptions:\n  --config TEXT               Path to config file for paa.\n  --module-filepath TEXT      Path to .py file to be packaged.\n  --mapping-filepath TEXT     Path to .json file that maps import to install\n                              dependecy names.\n  --cli-module-filepath TEXT  Path to .py file that contains cli logic.\n  --dependencies-dir TEXT     Path to directory with local dependencies of the\n                              module.\n  --help                      Show this message and exit.\n</code></pre>"},{"location":"flow/","title":"Flow","text":""},{"location":"release-notes/","title":"Release notes","text":""},{"location":"release-notes/#031","title":"0.3.1","text":"<pre><code>- release notes integragration into version interation\n\n- optional labels to interate version from commit messages\n\n- fixes for initial release notes entry\n\n- check-vulnerabilities with cli\n</code></pre>"},{"location":"release-notes/#026","title":"0.2.6","text":"<pre><code>- fixes to requirements extraction from import .. as .. pattern\n</code></pre>"},{"location":"release-notes/#025","title":"0.2.5","text":"<pre><code>- minor fixes to local dependencies with cli\n</code></pre>"},{"location":"release-notes/#024","title":"0.2.4","text":"<pre><code>- cli handler depiction in flow diagram\n\n- cli name change to paa\n</code></pre>"},{"location":"release-notes/#023","title":"0.2.3","text":"<pre><code>- initial docs for cli intefrace\n\n- initial  metadata extraction from cli modules to change their cli usage names from default\n\n- splitting package into test-install and make-package\n\n- adding method to initialize config\n</code></pre>"},{"location":"release-notes/#022","title":"0.2.2","text":"<pre><code>- minor fixes for requirements extraction in preparations for cli packaging\n</code></pre>"},{"location":"release-notes/#021","title":"0.2.1","text":"<pre><code>- initial cli interface for packaging\n</code></pre>"},{"location":"release-notes/#017","title":"0.1.7","text":"<pre><code>- fix that skips cli packaging if cli file does not exist\n</code></pre>"},{"location":"release-notes/#016","title":"0.1.6","text":"<pre><code>- initial cli scripts support\n</code></pre>"},{"location":"release-notes/#015","title":"0.1.5","text":"<pre><code>- mkdocs handler to build package documentation\n</code></pre>"},{"location":"release-notes/#014","title":"0.1.4","text":"<pre><code>- test_install_package() method for local testing\n</code></pre>"},{"location":"release-notes/#013","title":"0.1.3","text":"<pre><code>- improved ReleaseNotesHandler with resistance to duplicate history\n</code></pre>"},{"location":"release-notes/#012","title":"0.1.2","text":"<pre><code>- integration of pip-audit to check vulnerabilities\n</code></pre>"},{"location":"release-notes/#011","title":"0.1.1","text":"<pre><code>- initial version with release notes handler\n</code></pre>"},{"location":"usage-examples/","title":"Usage examples","text":"<pre><code>import sys\nsys.path.append('../')\nfrom python_modules.package_auto_assembler import (VersionHandler, \\\n    ImportMappingHandler, RequirementsHandler, MetadataHandler, \\\n        LocalDependaciesHandler, LongDocHandler, SetupDirHandler, \\\n            ReleaseNotesHandler, MkDocsHandler, PackageAutoAssembler)\n</code></pre>"},{"location":"usage-examples/#1-package-versioning","title":"1. Package versioning","text":""},{"location":"usage-examples/#initialize-versionhandler","title":"Initialize VersionHandler","text":"<pre><code>pv = VersionHandler(\n    # required\n    versions_filepath = '../tests/package_auto_assembler/lsts_package_versions.yml',\n    log_filepath = '../tests/package_auto_assembler/version_logs.csv',\n    # optional\n    default_version = \"0.0.1\")\n</code></pre>"},{"location":"usage-examples/#add-new-package","title":"Add new package","text":"<pre><code>pv.add_package(\n    package_name = \"new_package\",\n    # optional\n    version = \"0.0.1\"\n)\n</code></pre>"},{"location":"usage-examples/#update-package-version","title":"Update package version","text":"<pre><code>pv.increment_patch(\n    package_name = \"new_package\"\n)\n## for not tracked package\npv.increment_patch(\n    package_name = \"another_new_package\",\n    # optional\n    default_version = \"0.0.1\"\n)\n</code></pre> <pre><code>There are no known versions of 'another_new_package', 0.0.1 will be used!\n</code></pre>"},{"location":"usage-examples/#display-current-versions-and-logs","title":"Display current versions and logs","text":"<pre><code>pv.get_versions(\n    # optional\n    versions_filepath = '../tests/package_auto_assembler/lsts_package_versions.yml'\n)\n</code></pre> <pre><code>{'another_new_package': '0.0.1', 'new_package': '0.0.2'}\n</code></pre> <pre><code>pv.get_version(\n    package_name='new_package'\n)\n</code></pre> <pre><code>'0.0.2'\n</code></pre> <pre><code>pv.get_logs(\n    # optional\n    log_filepath = '../tests/package_auto_assembler/version_logs.csv'\n)\n</code></pre> Timestamp Package Version 0 2024-06-08 23:26:10 new_package 0.0.1 1 2024-06-08 23:26:11 new_package 0.0.2 2 2024-06-08 23:26:11 another_new_package 0.0.1"},{"location":"usage-examples/#flush-versions-and-logs","title":"Flush versions and logs","text":"<pre><code>pv.flush_versions()\npv.flush_logs()\n</code></pre>"},{"location":"usage-examples/#2-import-mapping","title":"2. Import mapping","text":""},{"location":"usage-examples/#initialize-importmappinghandler","title":"Initialize ImportMappingHandler","text":"<pre><code>im = ImportMappingHandler(\n    # required\n    mapping_filepath = \"../env_spec/package_mapping.json\"\n)\n</code></pre>"},{"location":"usage-examples/#load-package-mappings","title":"Load package mappings","text":"<pre><code>im.load_package_mappings(\n    # optional\n    mapping_filepath = \"../env_spec/package_mapping.json\"\n)\n</code></pre> <pre><code>{'PIL': 'Pillow',\n 'bs4': 'beautifulsoup4',\n 'fitz': 'PyMuPDF',\n 'attr': 'attrs',\n 'dotenv': 'python-dotenv',\n 'googleapiclient': 'google-api-python-client',\n 'google_auth_oauthlib': 'google-auth-oauthlib',\n 'sentence_transformers': 'sentence-transformers',\n 'flask': 'Flask',\n 'stdlib_list': 'stdlib-list',\n 'sklearn': 'scikit-learn',\n 'yaml': 'pyyaml',\n 'package_auto_assembler': 'package-auto-assembler'}\n</code></pre>"},{"location":"usage-examples/#3-extracting-and-merging-requirements","title":"3. Extracting and merging requirements","text":""},{"location":"usage-examples/#initialize-requirementshandler","title":"Initialize RequirementsHandler","text":"<pre><code>rh = RequirementsHandler(\n    # optional/required later\n    module_filepath = \"../tests/package_auto_assembler/example_module.py\",\n    package_mappings = {'PIL': 'Pillow',\n                        'bs4': 'beautifulsoup4',\n                        'fitz': 'PyMuPDF',\n                        'attr': 'attrs',\n                        'dotenv': 'python-dotenv',\n                        'googleapiclient': 'google-api-python-client',\n                        'sentence_transformers': 'sentence-transformers',\n                        'flask': 'Flask',\n                        'stdlib_list': 'stdlib-list',\n                        'sklearn': 'scikit-learn',\n                        'yaml': 'pyyaml'},\n    requirements_output_path = \"../tests/package_auto_assembler/\",\n    output_requirements_prefix = \"requirements_\",\n    custom_modules_filepath = \"../tests/package_auto_assembler/dependancies\",\n    python_version = '3.8',\n    add_header = True\n)\n</code></pre>"},{"location":"usage-examples/#list-custom-modules-for-a-given-directory","title":"List custom modules for a given directory","text":"<pre><code>rh.list_custom_modules(\n    # optional\n    custom_modules_filepath=\"../tests/package_auto_assembler/dependancies\"\n)\n</code></pre> <pre><code>['example_local_dependacy_1', 'example_local_dependacy_2']\n</code></pre>"},{"location":"usage-examples/#check-if-module-is-a-standard-python-library","title":"Check if module is a standard python library","text":"<pre><code>rh.is_standard_library(\n    # required\n    module_name = 'example_local_dependacy_1',\n    # optional\n    python_version = '3.8'\n)\n</code></pre> <pre><code>False\n</code></pre> <pre><code>rh.is_standard_library(\n    # required\n    module_name = 'logging',\n    # optional\n    python_version = '3.8'\n)\n</code></pre> <pre><code>True\n</code></pre>"},{"location":"usage-examples/#extract-requirements-from-the-module-file","title":"Extract requirements from the module file","text":"<pre><code>rh.extract_requirements(\n    # optional\n    module_filepath = \"../tests/package_auto_assembler/example_module.py\",\n    custom_modules = ['example_local_dependacy_2', 'example_local_dependacy_1'],\n    package_mappings = {'PIL': 'Pillow',\n                        'bs4': 'beautifulsoup4',\n                        'fitz': 'PyMuPDF',\n                        'attr': 'attrs',\n                        'dotenv': 'python-dotenv',\n                        'googleapiclient': 'google-api-python-client',\n                        'sentence_transformers': 'sentence-transformers',\n                        'flask': 'Flask',\n                        'stdlib_list': 'stdlib-list',\n                        'sklearn': 'scikit-learn',\n                        'yaml': 'pyyaml'},\n    python_version = '3.8',\n    add_header=True\n)\n</code></pre> <pre><code>['### example_module.py', 'attrs&gt;=22.2.0']\n</code></pre> <pre><code>rh.requirements_list\n</code></pre> <pre><code>['### example_module.py', 'attrs&gt;=22.2.0']\n</code></pre>"},{"location":"usage-examples/#audit-dependencies","title":"Audit dependencies","text":"<pre><code>rh.check_vulnerabilities(\n    # optional if ran extract_requirements() before\n    requirements_list = None,\n    raise_error = True\n)\n</code></pre> <pre><code>No known vulnerabilities found\n</code></pre> <pre><code>rh.vulnerabilities\n</code></pre> <pre><code>[]\n</code></pre> <pre><code>try:\n    rh.check_vulnerabilities(\n        # optional if ran extract_requirements() before\n        requirements_list = ['attrs&gt;=22.2.0', 'pandas', 'hnswlib==0.7.0'],\n        raise_error = True\n    )\nexcept Exception as e:\n    print(f\"Error: {e}\")\n</code></pre> <pre><code>Found 1 known vulnerability in 1 package\n\n\n\nName    Version ID                  Fix Versions\n------- ------- ------------------- ------------\nhnswlib 0.7.0   GHSA-xwc8-rf6m-xr86\n\nError: Found vulnerabilities, resolve them or ignore check to move forwards!\n</code></pre> <pre><code>rh.vulnerabilities\n</code></pre> <pre><code>[{'name': 'hnswlib',\n  'version': '0.7.0',\n  'id': 'GHSA-xwc8-rf6m-xr86',\n  'fix_versions': None}]\n</code></pre>"},{"location":"usage-examples/#save-requirements-to-a-file","title":"Save requirements to a file","text":"<pre><code>rh.write_requirements_file(\n    # optional/required later\n    module_name = 'example_module',\n    requirements = ['### example_module.py', 'attrs&gt;=22.2.0'],\n    output_path = \"../tests/package_auto_assembler/\",\n    prefix = \"requirements_\"\n)\n</code></pre>"},{"location":"usage-examples/#read-requirements","title":"Read requirements","text":"<pre><code>rh.read_requirements_file(\n    # required\n    requirements_filepath = \"../tests/package_auto_assembler/requirements_example_module.txt\"\n)\n</code></pre> <pre><code>['attrs&gt;=22.2.0']\n</code></pre>"},{"location":"usage-examples/#4-preparing-metadata","title":"4. Preparing metadata","text":""},{"location":"usage-examples/#initializing-metadatahandler","title":"Initializing MetadataHandler","text":"<pre><code>mh = MetadataHandler(\n    # optional/required later\n    module_filepath = \"../tests/package_auto_assembler/example_module.py\"\n)\n</code></pre>"},{"location":"usage-examples/#check-if-metadata-is-available","title":"Check if metadata is available","text":"<pre><code>mh.is_metadata_available(\n    # optional\n    module_filepath = \"../tests/package_auto_assembler/example_module.py\"\n)\n</code></pre> <pre><code>True\n</code></pre>"},{"location":"usage-examples/#extract-metadata-from-module","title":"Extract metadata from module","text":"<pre><code>mh.get_package_metadata(\n    # optional\n    module_filepath = \"../tests/package_auto_assembler/example_module.py\"\n)\n</code></pre> <pre><code>{'author': 'Kyrylo Mordan',\n 'author_email': 'parachute.repo@gmail.com',\n 'version': '0.0.1',\n 'description': 'A mock handler for simulating a vector database.',\n 'keywords': ['python', 'vector database', 'similarity search']}\n</code></pre>"},{"location":"usage-examples/#5-merging-local-dependacies-into-single-module","title":"5. Merging local dependacies into single module","text":""},{"location":"usage-examples/#initializing-localdependacieshandler","title":"Initializing LocalDependaciesHandler","text":"<pre><code>ldh = LocalDependaciesHandler(\n    # required\n    main_module_filepath = \"../tests/package_auto_assembler/example_module.py\",\n    dependencies_dir = \"../tests/package_auto_assembler/dependancies/\",\n    # optional\n    save_filepath = \"./combined_example_module.py\"\n)\n</code></pre>"},{"location":"usage-examples/#combine-main-module-with-dependacies","title":"Combine main module with dependacies","text":"<pre><code>print(ldh.combine_modules(\n    # optional\n    main_module_filepath = \"../tests/package_auto_assembler/example_module.py\",\n    dependencies_dir = \"../tests/package_auto_assembler/dependancies/\",\n    add_empty_design_choices = False\n)[0:1000])\n</code></pre> <pre><code>\"\"\"\nMock Vector Db Handler\n\nThis class is a mock handler for simulating a vector database, designed primarily for testing and development scenarios.\nIt offers functionalities such as text embedding, hierarchical navigable small world (HNSW) search,\nand basic data management within a simulated environment resembling a vector database.\n\"\"\"\n\nimport logging\nimport json\nimport time\nimport attr #&gt;=22.2.0\nimport string\nimport os\nimport csv\n\n__design_choices__ = {}\n\n# Metadata for package creation\n\n\n@attr.s\nclass ComparisonFrame:\n\n    \"\"\"\n    Compares query:response pairs expected vs recieved with semantic similarity\n    and simple metrics of word count, line count etc.\n\n    ...\n\n    Attributes\n    ----------\n    embedder : SentenceTransformer\n        The model used to generate embeddings for semantic comparison.\n    record_file : str\n        The name of the CSV file where queries and expected results are stored.\n    results_file : str\n        The name of the CSV file where comparison results\n</code></pre> <pre><code>ldh.dependencies_names_list\n</code></pre> <pre><code>['example_local_dependacy_1', 'example_local_dependacy_2']\n</code></pre>"},{"location":"usage-examples/#save-combined-module","title":"Save combined module","text":"<pre><code>ldh.save_combined_modules(\n    # optional\n    combined_module = ldh.combine_modules(),\n    save_filepath = \"./combined_example_module.py\"\n)\n</code></pre>"},{"location":"usage-examples/#6-prepare-readme","title":"6. Prepare README","text":"<pre><code>import logging\nldh = LongDocHandler(\n    # optional/required later\n    notebook_path = \"../tests/package_auto_assembler/example_module.ipynb\",\n    markdown_filepath = \"../example_module.md\",\n    timeout = 600,\n    kernel_name = 'python3',\n    # logger\n    loggerLvl = logging.DEBUG\n)\n</code></pre>"},{"location":"usage-examples/#convert-notebook-to-md-without-executing","title":"Convert notebook to md without executing","text":"<pre><code>ldh.convert_notebook_to_md(\n    # optional\n    notebook_path = \"../tests/package_auto_assembler/example_module.ipynb\",\n    output_path = \"../example_module.md\"\n)\n</code></pre> <pre><code>Converted ../tests/package_auto_assembler/example_module.ipynb to ../example_module.md\n</code></pre>"},{"location":"usage-examples/#convert-notebook-to-md-with-executing","title":"Convert notebook to md with executing","text":"<pre><code>ldh.convert_and_execute_notebook_to_md(\n    # optional\n    notebook_path = \"../tests/package_auto_assembler/example_module.ipynb\",\n    output_path = \"../example_module.md\",\n    timeout = 600,\n    kernel_name = 'python3'\n)\n</code></pre> <pre><code>Converted and executed ../tests/package_auto_assembler/example_module.ipynb to ../example_module.md\n</code></pre>"},{"location":"usage-examples/#return-long-description","title":"Return long description","text":"<pre><code>long_description = ldh.return_long_description(\n    # optional\n    markdown_filepath = \"../example_module.md\"\n)\n</code></pre>"},{"location":"usage-examples/#7-assembling-setup-directory","title":"7. Assembling setup directory","text":""},{"location":"usage-examples/#initializing-setupdirhandler","title":"Initializing SetupDirHandler","text":"<pre><code>sdh = SetupDirHandler(\n    # required\n    module_filepath = \"../tests/package_auto_assembler/example_module.py\",\n    # optional/ required\n    module_name = \"example_module\",\n    metadata = {'author': 'Kyrylo Mordan',\n                'version': '0.0.1',\n                'description': 'Example module.',\n                'long_description' : long_description,\n                'keywords': ['python']},\n    requirements = ['attrs&gt;=22.2.0'],\n    classifiers = ['Development Status :: 3 - Alpha',\n                   'Intended Audience :: Developers',\n                   'Intended Audience :: Science/Research',\n                   'Programming Language :: Python :: 3',\n                   'Programming Language :: Python :: 3.9',\n                   'Programming Language :: Python :: 3.10',\n                   'Programming Language :: Python :: 3.11',\n                   'License :: OSI Approved :: MIT License',\n                   'Topic :: Scientific/Engineering'],\n    setup_directory = \"./example_setup_dir\"\n)\n</code></pre>"},{"location":"usage-examples/#create-empty-setup-dir","title":"Create empty setup dir","text":"<pre><code>sdh.flush_n_make_setup_dir(\n    # optional\n    setup_directory = \"./example_setup_dir\"\n)\n</code></pre>"},{"location":"usage-examples/#copy-module-to-setup-dir","title":"Copy module to setup dir","text":"<pre><code>sdh.copy_module_to_setup_dir(\n    # optional\n    module_filepath = \"./combined_example_module.py\",\n    setup_directory = \"./example_setup_dir\"\n)\n</code></pre>"},{"location":"usage-examples/#create-init-file","title":"Create init file","text":"<pre><code>sdh.create_init_file(\n    # optional\n    module_name = \"example_module\",\n    setup_directory = \"./example_setup_dir\"\n)\n</code></pre>"},{"location":"usage-examples/#create-setup-file","title":"Create setup file","text":"<pre><code>sdh.write_setup_file(\n    # optional\n    module_name = \"example_module\",\n    metadata = {'author': 'Kyrylo Mordan',\n                'version': '0.0.1',\n                'description': 'Example Module',\n                'keywords': ['python']},\n    requirements = ['attrs&gt;=22.2.0'],\n    classifiers = ['Development Status :: 3 - Alpha',\n                   'Intended Audience :: Developers',\n                   'Intended Audience :: Science/Research',\n                   'Programming Language :: Python :: 3',\n                   'Programming Language :: Python :: 3.9',\n                   'Programming Language :: Python :: 3.10',\n                   'Programming Language :: Python :: 3.11',\n                   'License :: OSI Approved :: MIT License',\n                   'Topic :: Scientific/Engineering'],\n    setup_directory = \"./example_setup_dir\"\n)\n</code></pre>"},{"location":"usage-examples/#8-creating-release-notes-from-commit-messages","title":"8. Creating release notes from commit messages","text":"<pre><code>rnh = ReleaseNotesHandler(\n    # path to existing or new release notes file\n    filepath = '../tests/package_auto_assembler/release_notes.md',\n    # name of label in commit message [example_module] for filter\n    label_name = 'example_module',\n    # new version to be used in release notes\n    version = '0.0.1'\n)\n</code></pre> <pre><code>No release notes were found in ../tests/package_auto_assembler/release_notes.md, new will be initialized!\nNo relevant commit messages found!\n..trying depth 2 !\nNo relevant commit messages found!\nNo messages to clean were provided\n</code></pre>"},{"location":"usage-examples/#-overwritting-commit-messages-from-example","title":"- overwritting commit messages from example","text":"<pre><code># commit messages from last merge\nrnh.commit_messages\n</code></pre> <pre><code>['fix to paa tests',\n '[package_auto_assembler] check-vulnerabilities with cli',\n '[mocker_db] initital cli interface that allows to clone code from api version of mocker and run it',\n '[package_auto_assembler] fixes to requirements extraction from import .. as .. pattern',\n 'Update package version tracking files',\n 'Update requirements',\n '[comparisonframe] initial version',\n 'preparing initial comparisonframe for packaging',\n 'Update package version tracking files',\n 'Update README',\n 'Update requirements']\n</code></pre> <pre><code>example_commit_messages = [\n    '[example_module] usage example for initial release notes; bugfixes for RNH',\n    '[BUGFIX] missing parameterframe usage example and reduntant png file',\n    '[example_module][0.1.2] initial release notes handler',\n    'Update README',\n    'Update requirements'\n]\nrnh.commit_messages = example_commit_messages\n</code></pre>"},{"location":"usage-examples/#-internal-methods-that-run-on-intialiazation-of-releasenoteshandler","title":"- internal methods that run on intialiazation of ReleaseNotesHandler","text":"<pre><code># get messages relevant only for label\nrnh._filter_commit_messages_by_package()\nprint(\"Example filtered_messaged:\")\nprint(rnh.filtered_messages)\n\n# clean messages\nrnh._clean_and_split_commit_messages()\nprint(\"Example processed_messages:\")\nprint(rnh.processed_messages)\n</code></pre> <pre><code>Example filtered_messaged:\n['[example_module] usage example for initial release notes; bugfixes for RNH', '[example_module][0.1.2] initial release notes handler']\nExample processed_messages:\n['usage example for initial release notes', 'bugfixes for RNH', 'initial release notes handler']\n</code></pre>"},{"location":"usage-examples/#-get-version-update-from-relevant-messages","title":"- get version update from relevant messages","text":"<pre><code>version_update = rnh.extract_version_update()\nprint(f\"Example version_update: {version_update}\")\n</code></pre> <pre><code>Example version_update: 0.1.2\n</code></pre>"},{"location":"usage-examples/#-augment-existing-release-note-with-new-entries-or-create-new","title":"- augment existing release note with new entries or create new","text":"<pre><code># augment existing release note with new entries or create new\nrnh.create_release_note_entry(\n    # optional\n    existing_contents=rnh.existing_contents,\n    version=rnh.version,\n    new_messages=rnh.processed_messages\n)\nprint(\"Example processed_note_entries:\")\nprint(rnh.processed_note_entries)\n</code></pre> <pre><code>Example processed_note_entries:\n['# Release notes\\n', '\\n', '### 0.1.2\\n', '\\n', '    - usage example for initial release notes\\n', '\\n', '    - bugfixes for RNH\\n', '\\n', '    - initial release notes handler\\n']\n</code></pre>"},{"location":"usage-examples/#-saving-updated-relese-notes","title":"- saving updated relese notes","text":"<pre><code>rnh.existing_contents\n</code></pre> <pre><code>['# Release notes\\n']\n</code></pre> <pre><code>rnh.save_release_notes()\n</code></pre> <pre><code># updated content\nrnh.get_release_notes_content()\n</code></pre> <pre><code>['# Release notes\\n',\n '\\n',\n '### 0.1.2\\n',\n '\\n',\n '    - usage example for initial release notes\\n',\n '\\n',\n '    - bugfixes for RNH\\n',\n '\\n',\n '    - initial release notes handler\\n']\n</code></pre>"},{"location":"usage-examples/#9-making-a-package","title":"9. Making a package","text":""},{"location":"usage-examples/#initializing-packageautoassembler","title":"Initializing PackageAutoAssembler","text":"<pre><code>paa = PackageAutoAssembler(\n    # required\n    module_name = \"example_module\",\n    module_filepath  = \"../tests/package_auto_assembler/example_module.py\",\n    # optional\n    mapping_filepath = \"../env_spec/package_mapping.json\",\n    dependencies_dir = \"../tests/package_auto_assembler/dependancies/\",\n    example_notebook_path = \"./mock_vector_database.ipynb\",\n    versions_filepath = '../tests/package_auto_assembler/lsts_package_versions.yml',\n    log_filepath = '../tests/package_auto_assembler/version_logs.csv',\n    setup_directory = \"./example_module\",\n    release_notes_filepath = \"../tests/package_auto_assembler/release_notes.md\",\n    classifiers = ['Development Status :: 3 - Alpha',\n                    'Intended Audience :: Developers',\n                    'Intended Audience :: Science/Research',\n                    'Programming Language :: Python :: 3',\n                    'Programming Language :: Python :: 3.9',\n                    'Programming Language :: Python :: 3.10',\n                    'Programming Language :: Python :: 3.11',\n                    'License :: OSI Approved :: MIT License',\n                    'Topic :: Scientific/Engineering'],\n    requirements_list = [],\n    execute_readme_notebook = True,\n    python_version = \"3.8\",\n    version_increment_type = \"patch\",\n    default_version = \"0.0.1\",\n    check_vulnerabilities = True,\n    add_requirements_header = True\n)\n</code></pre>"},{"location":"usage-examples/#add-metadata-from-module","title":"Add metadata from module","text":"<pre><code>paa.add_metadata_from_module(\n    # optional\n    module_filepath  = \"../tests/package_auto_assembler/example_module.py\"\n)\n</code></pre> <pre><code>Adding metadata ...\n</code></pre>"},{"location":"usage-examples/#add-or-update-version","title":"Add or update version","text":"<pre><code>paa.add_or_update_version(\n    # overwrites auto mode (not suggested)\n    version_increment_type = \"patch\",\n    version = \"1.2.6\",\n    # optional\n    module_name = \"example_module\",\n    versions_filepath = '../tests/package_auto_assembler/lsts_package_versions.yml',\n    log_filepath = '../tests/package_auto_assembler/version_logs.csv'\n)\n</code></pre> <pre><code>Incrementing version ...\n</code></pre>"},{"location":"usage-examples/#add-release-notes-from-commit-messages","title":"Add release notes from commit messages","text":"<pre><code>paa.add_or_update_release_notes(\n    # optional\n    filepath=\"../tests/package_auto_assembler/release_notes.md\",\n    version=paa.metadata['version']\n)\n</code></pre> <pre><code>Updating release notes ...\n</code></pre>"},{"location":"usage-examples/#prepare-setup-directory","title":"Prepare setup directory","text":"<pre><code>paa.prep_setup_dir()\n</code></pre> <pre><code>Preparing setup directory ...\n</code></pre>"},{"location":"usage-examples/#merge-local-dependacies","title":"Merge local dependacies","text":"<pre><code>paa.merge_local_dependacies(\n    # optional\n    main_module_filepath = \"../tests/package_auto_assembler/example_module.py\",\n    dependencies_dir= \"../tests/package_auto_assembler/dependancies/\",\n    save_filepath = \"./example_module/example_module.py\"\n)\n</code></pre> <pre><code>Merging ../tests/package_auto_assembler/example_module.py with dependecies from ../tests/package_auto_assembler/dependancies/ into ./example_module/example_module.py\n</code></pre>"},{"location":"usage-examples/#add-requirements-from-module","title":"Add requirements from module","text":"<pre><code>paa.add_requirements_from_module(\n    # optional\n    module_filepath = \"../tests/package_auto_assembler/example_module.py\",\n    import_mappings = {'PIL': 'Pillow',\n                        'bs4': 'beautifulsoup4',\n                        'fitz': 'PyMuPDF',\n                        'attr': 'attrs',\n                        'dotenv': 'python-dotenv',\n                        'googleapiclient': 'google-api-python-client',\n                        'sentence_transformers': 'sentence-transformers',\n                        'flask': 'Flask',\n                        'stdlib_list': 'stdlib-list',\n                        'sklearn': 'scikit-learn',\n                        'yaml': 'pyyaml',\n                        'git' : 'gitpython'}\n)\n</code></pre> <pre><code>Adding requirements from ../tests/package_auto_assembler/example_module.py\nNo known vulnerabilities found\n</code></pre> <pre><code>paa.requirements_list\n</code></pre> <pre><code>['### example_module.py', 'attrs&gt;=22.2.0']\n</code></pre>"},{"location":"usage-examples/#make-readme-out-of-example-notebook","title":"Make README out of example notebook","text":"<pre><code>paa.add_readme(\n    # optional\n    example_notebook_path = \"../tests/package_auto_assembler/example_module.ipynb\",\n    output_path = \"./example_module/README.md\",\n    execute_notebook=False,\n)\n</code></pre> <pre><code>Adding README from ../tests/package_auto_assembler/example_module.ipynb to ./example_module/README.md\n</code></pre>"},{"location":"usage-examples/#prepare-setup-file","title":"Prepare setup file","text":"<pre><code>paa.prep_setup_file(\n    # optional\n    metadata = {'author': 'Kyrylo Mordan',\n                'version': '0.0.1',\n                'description': 'Example module',\n                'keywords': ['python']},\n    requirements = ['### example_module.py',\n                    'attrs&gt;=22.2.0'],\n    classifiers = ['Development Status :: 3 - Alpha',\n                    'Intended Audience :: Developers',\n                    'Intended Audience :: Science/Research',\n                    'Programming Language :: Python :: 3',\n                    'Programming Language :: Python :: 3.9',\n                    'Programming Language :: Python :: 3.10',\n                    'Programming Language :: Python :: 3.11',\n                    'License :: OSI Approved :: MIT License',\n                    'Topic :: Scientific/Engineering'],\n    cli_module_filepath = \"../tests/package_auto_assembler/cli.py\"\n\n)\n</code></pre> <pre><code>Preparing setup file for None package ...\n</code></pre>"},{"location":"usage-examples/#make-package","title":"Make package","text":"<pre><code>paa.make_package(\n    # optional\n    setup_directory = \"./example_module\"\n)\n</code></pre> <pre><code>Making package from ./example_module ...\n\n\n\n\n\nCompletedProcess(args=['python', './example_module/setup.py', 'sdist', 'bdist_wheel'], returncode=0, stdout=\"running sdist\\nrunning egg_info\\ncreating example_module.egg-info\\nwriting example_module.egg-info/PKG-INFO\\nwriting dependency_links to example_module.egg-info/dependency_links.txt\\nwriting entry points to example_module.egg-info/entry_points.txt\\nwriting requirements to example_module.egg-info/requires.txt\\nwriting top-level names to example_module.egg-info/top_level.txt\\nwriting manifest file 'example_module.egg-info/SOURCES.txt'\\nreading manifest file 'example_module.egg-info/SOURCES.txt'\\nwriting manifest file 'example_module.egg-info/SOURCES.txt'\\nrunning check\\ncreating example_module-0.0.1\\ncreating example_module-0.0.1/example_module\\ncreating example_module-0.0.1/example_module.egg-info\\ncopying files to example_module-0.0.1...\\ncopying example_module/__init__.py -&gt; example_module-0.0.1/example_module\\ncopying example_module/cli.py -&gt; example_module-0.0.1/example_module\\ncopying example_module/example_module.py -&gt; example_module-0.0.1/example_module\\ncopying example_module/setup.py -&gt; example_module-0.0.1/example_module\\ncopying example_module.egg-info/PKG-INFO -&gt; example_module-0.0.1/example_module.egg-info\\ncopying example_module.egg-info/SOURCES.txt -&gt; example_module-0.0.1/example_module.egg-info\\ncopying example_module.egg-info/dependency_links.txt -&gt; example_module-0.0.1/example_module.egg-info\\ncopying example_module.egg-info/entry_points.txt -&gt; example_module-0.0.1/example_module.egg-info\\ncopying example_module.egg-info/requires.txt -&gt; example_module-0.0.1/example_module.egg-info\\ncopying example_module.egg-info/top_level.txt -&gt; example_module-0.0.1/example_module.egg-info\\nWriting example_module-0.0.1/setup.cfg\\ncreating dist\\nCreating tar archive\\nremoving 'example_module-0.0.1' (and everything under it)\\nrunning bdist_wheel\\nrunning build\\nrunning build_py\\ncreating build\\ncreating build/lib\\ncreating build/lib/example_module\\ncopying example_module/example_module.py -&gt; build/lib/example_module\\ncopying example_module/__init__.py -&gt; build/lib/example_module\\ncopying example_module/setup.py -&gt; build/lib/example_module\\ncopying example_module/cli.py -&gt; build/lib/example_module\\ninstalling to build/bdist.macosx-10.9-x86_64/wheel\\nrunning install\\nrunning install_lib\\ncreating build/bdist.macosx-10.9-x86_64\\ncreating build/bdist.macosx-10.9-x86_64/wheel\\ncreating build/bdist.macosx-10.9-x86_64/wheel/example_module\\ncopying build/lib/example_module/example_module.py -&gt; build/bdist.macosx-10.9-x86_64/wheel/example_module\\ncopying build/lib/example_module/__init__.py -&gt; build/bdist.macosx-10.9-x86_64/wheel/example_module\\ncopying build/lib/example_module/setup.py -&gt; build/bdist.macosx-10.9-x86_64/wheel/example_module\\ncopying build/lib/example_module/cli.py -&gt; build/bdist.macosx-10.9-x86_64/wheel/example_module\\nrunning install_egg_info\\nCopying example_module.egg-info to build/bdist.macosx-10.9-x86_64/wheel/example_module-0.0.1-py3.9.egg-info\\nrunning install_scripts\\ncreating build/bdist.macosx-10.9-x86_64/wheel/example_module-0.0.1.dist-info/WHEEL\\ncreating 'dist/example_module-0.0.1-py3-none-any.whl' and adding 'build/bdist.macosx-10.9-x86_64/wheel' to it\\nadding 'example_module/__init__.py'\\nadding 'example_module/cli.py'\\nadding 'example_module/example_module.py'\\nadding 'example_module/setup.py'\\nadding 'example_module-0.0.1.dist-info/METADATA'\\nadding 'example_module-0.0.1.dist-info/WHEEL'\\nadding 'example_module-0.0.1.dist-info/entry_points.txt'\\nadding 'example_module-0.0.1.dist-info/top_level.txt'\\nadding 'example_module-0.0.1.dist-info/RECORD'\\nremoving build/bdist.macosx-10.9-x86_64/wheel\\n\", stderr='warning: sdist: standard file not found: should have one of README, README.rst, README.txt, README.md\\n\\n/Users/insani_dei/miniconda3/envs/testenv/lib/python3.9/site-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.\\n  warnings.warn(\\n')\n</code></pre>"},{"location":"usage-examples/#10-making-simple-mkdocs-site","title":"10. Making simple MkDocs site","text":""},{"location":"usage-examples/#-preparing-inputs","title":"- preparing inputs","text":"<pre><code>package_name = \"example_module\"\n\nmodule_content = LongDocHandler().read_module_content(filepath=f\"../tests/package_auto_assembler/{package_name}.py\")\n\ndocstring = LongDocHandler().extract_module_docstring(module_content=module_content)\npypi_link = LongDocHandler().get_pypi_badge(module_name=package_name)\n\n\ndocs_file_paths = {\n    \"../example_module.md\" : \"usage-examples.md\",\n    '../tests/package_auto_assembler/release_notes.md' : 'release_notes.md'\n}\n</code></pre> <pre><code>mdh = MkDocsHandler(\n    # required\n    ## name of the package to be displayed\n    package_name = package_name,\n    ## dictionary of markdown files, with path as keys\n    docs_file_paths = docs_file_paths,\n    # optional\n    ## module docstring to be displayed in the index\n    module_docstring = docstring,\n    ## pypi badge to be displayed in the index\n    pypi_badge = pypi_link,\n    ## license badge to be displayed in the index\n    license_badge=\"[![License](https://img.shields.io/github/license/Kiril-Mordan/reusables)](https://github.com/Kiril-Mordan/reusables/blob/main/LICENSE)\",\n    ## name of the project directory\n    project_name = \"temp_project\")\n</code></pre>"},{"location":"usage-examples/#-preparing-site","title":"- preparing site","text":"<pre><code>mdh.create_mkdocs_dir()\nmdh.move_files_to_docs()\nmdh.generate_markdown_for_images()\nmdh.create_index()\nmdh.create_mkdocs_yml()\nmdh.build_mkdocs_site()\n</code></pre> <pre><code>Created new MkDocs dir: temp_project\nCopied ../example_module.md to temp_project/docs/usage-examples.md\nCopied ../tests/package_auto_assembler/release_notes.md to temp_project/docs/release_notes.md\nindex.md has been created with site_name: example-module\nmkdocs.yml has been created with site_name: Example module\nCustom CSS created at temp_project/docs/css/extra.css\n\n\nINFO    -  Cleaning site directory\nINFO    -  Building documentation to directory: /Users/user/reusables/example_notebooks/temp_project/site\nINFO    -  Documentation built in 0.80 seconds\n</code></pre>"},{"location":"usage-examples/#-test-runing-site","title":"- test runing site","text":"<pre><code>mdh.serve_mkdocs_site()\n</code></pre>"},{"location":"usage/","title":"Usage","text":""}]}