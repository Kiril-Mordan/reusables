{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Intro","text":"<p>MockerDB is a python module that contains mock vector database like solution built around python dictionary data type. It contains methods necessary to interact with this 'database', embed, search and persist.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install mocker-db\n</code></pre>"},{"location":"flow/","title":"Flow","text":""},{"location":"release-notes/","title":"Release notes","text":""},{"location":"release-notes/#023","title":"0.2.3","text":"<pre><code>- providing flag to disable embedder initialization\n\n- disabling old cli intefrace\n\n- removing sentence_transformers from the list of default requirements so that SentenceTransformer needs to be provided externally if needed\n</code></pre>"},{"location":"release-notes/#022","title":"0.2.2","text":"<pre><code>- option to get embedded field\n\n- initial llm filter\n</code></pre>"},{"location":"release-notes/#021","title":"0.2.1","text":"<pre><code>- ability to return unique hash key for each record, previously inaccesible\n</code></pre>"},{"location":"release-notes/#020","title":"0.2.0","text":"<pre><code>- precise keywords match with cutoff 1 and fuzzy match with &lt; 1 through filters\n\n- keywords search with difflib\n</code></pre>"},{"location":"release-notes/#013","title":"0.1.3","text":"<pre><code>- option to add embedding and distance to output list\n\n- option to remove output key while outputting the rest of keys\n</code></pre>"},{"location":"release-notes/#012","title":"0.1.2","text":"<pre><code>- initital cli interface that allows to clone code from api version of mocker and run it\n</code></pre>"},{"location":"release-notes/#011","title":"0.1.1","text":"<pre><code>- initial MockerConnect for using MockerDB API\n</code></pre>"},{"location":"release-notes/#0012","title":"0.0.12","text":"<pre><code>-  bugfix for similarity search through partly embedded data\n</code></pre>"},{"location":"release-notes/#0011","title":"0.0.11","text":"<pre><code>- more advanced filtering\n</code></pre>"},{"location":"release-notes/#0010","title":"0.0.10","text":"<pre><code>- fix for search without embeddings\n</code></pre>"},{"location":"release-notes/#006","title":"0.0.6","text":"<pre><code>- fix for embedding storage\n</code></pre>"},{"location":"release-notes/#005","title":"0.0.5","text":"<pre><code>- initial implementation of separate caching store for embeddings\n</code></pre>"},{"location":"release-notes/#004","title":"0.0.4","text":"<pre><code>- updating hnswlib 0.7.0 -&gt; 0.8.0 to fix vulnerabilities issue\n\n- fixing a bug with resetting mocker inner state properly after search\n</code></pre>"},{"location":"release-notes/#003","title":"0.0.3","text":"<pre><code>- slightly improving logic of embedding with batches in parallel for sentence transformer embedder (default embedder)\n\n- updating desciption\n</code></pre>"},{"location":"release-notes/#002","title":"0.0.2","text":"<pre><code>- better error handling in situations when data was not found with applied filters\n</code></pre>"},{"location":"release-notes/#001","title":"0.0.1","text":"<pre><code>- initial version of MockerDB package that evolved from mock classes from redis into a standalone solution\n</code></pre>"},{"location":"usage-examples/","title":"Mocker DB","text":"<p>This class is a mock handler for simulating a vector database, designed primarily for testing and development scenarios. It offers functionalities such as text embedding, hierarchical navigable small world (HNSW) search, and basic data management within a simulated environment resembling a vector database.</p> <pre><code># import sys\n# sys.path.append('../')\nimport numpy as np\nfrom sentence_transformers import SentenceTransformer\nfrom mocker_db import MockerDB, SentenceTransformerEmbedder, MockerSimilaritySearch\n</code></pre>"},{"location":"usage-examples/#usage-examples","title":"Usage examples","text":"<p>The examples contain: 1. Inserting values into the database 2. Seaching and retrieving values from the database 3. Removing values from the database 4. Testing the HNSW Search Algorithm</p>"},{"location":"usage-examples/#1-inseting-values-into-the-database","title":"1. Inseting values into the database","text":"<pre><code># Initialization\nhandler = MockerDB(\n    # optional\n    embedder_params = {'model_name_or_path' : 'paraphrase-multilingual-mpnet-base-v2',\n                        'processing_type' : 'batch',\n                        'tbatch_size' : 500,\n                        'SentenceTransformer' : SentenceTransformer},\n    use_embedder = True,\n    embedder = SentenceTransformerEmbedder,\n    ## optional/ for similarity search\n    similarity_search = MockerSimilaritySearch,\n    return_keys_list = None,\n    search_results_n = 3,\n    similarity_search_type = 'linear',\n    similarity_params = {'space':'cosine'},\n    ## optional/ inputs with defaults\n    file_path = \"./mock_persist\",\n    persist = True,\n    embedder_error_tolerance = 0.0\n)\n# Initialize empty database\nhandler.establish_connection()\n</code></pre> <pre><code># Insert Data\nvalues_list = [\n    {\"text\": \"Sample text 1\",\n     \"text2\": \"Sample text 1\"},\n    {\"text\": \"Sample text 2\",\n     \"text2\": \"Sample text 2\"}\n]\nhandler.insert_values(values_list, \"text\")\nprint(f\"Items in the database {len(handler.data)}\")\n</code></pre> <pre><code>Items in the database 2\n</code></pre>"},{"location":"usage-examples/#2-seaching-and-retrieving-values-from-the-database","title":"2. Seaching and retrieving values from the database","text":"<ul> <li>get all keys</li> </ul> <pre><code>results = handler.search_database(\n    query = \"text\",\n    filter_criteria = {\n        \"text\" : \"Sample text 1\",\n    }\n)\nprint([{k: str(v)[:30] + \"...\" for k, v in result.items()} for result in results])\n</code></pre> <pre><code>[{'text': 'Sample text 1...', 'text2': 'Sample text 1...'}]\n</code></pre> <ul> <li>get all keys with keywords search</li> </ul> <pre><code>results = handler.search_database(\n    query = \"text\",\n    # when keyword key is provided filter is used to pass keywords\n    filter_criteria = {\n        \"text\" : [\"1\"],\n    },\n    keyword_check_keys = ['text'],\n    # percentage of filter keyword allowed to be different\n    keyword_check_cutoff = 1,\n    return_keys_list=['text']\n)\nprint([{k: str(v)[:30] + \"...\" for k, v in result.items()} for result in results])\n</code></pre> <pre><code>[{'text': 'Sample text 1...'}]\n</code></pre> <ul> <li>get all key - text2</li> </ul> <pre><code>results = handler.search_database(\n    query = \"text\",\n    filter_criteria = {\n        \"text\" : \"Sample text 1\",\n    },\n    return_keys_list=[\"-text2\"])\nprint([{k: str(v)[:30] + \"...\" for k, v in result.items()} for result in results])\n</code></pre> <pre><code>[{'text': 'Sample text 1...'}]\n</code></pre> <ul> <li>get all keys + distance</li> </ul> <pre><code>results = handler.search_database(\n    query = \"text\",\n    filter_criteria = {\n        \"text\" : \"Sample text 1\"\n    },\n    return_keys_list=[\"+&amp;distance\"]\n)\nprint([{k: str(v)[:30] + \"...\" for k, v in result.items()} for result in results])\n</code></pre> <pre><code>[{'text': 'Sample text 1...', 'text2': 'Sample text 1...', '&amp;distance': '0.6744726...'}]\n</code></pre> <ul> <li>get distance</li> </ul> <pre><code>results = handler.search_database(\n    query = \"text\",\n    filter_criteria = {\n        \"text\" : \"Sample text 1\"\n    },\n    return_keys_list=[\"&amp;distance\"]\n)\nprint([{k: str(v)[:30] + \"...\" for k, v in result.items()} for result in results])\n</code></pre> <pre><code>[{'&amp;distance': '0.6744726...'}]\n</code></pre> <ul> <li>get all keys + embeddings</li> </ul> <pre><code>results = handler.search_database(\n    query = \"text\",\n    filter_criteria = {\n        \"text\" : \"Sample text 1\"\n    },\n    return_keys_list=[\"+embedding\"]\n)\nprint([{k: str(v)[:30] + \"...\" for k, v in result.items()} for result in results])\n</code></pre> <pre><code>[{'text': 'Sample text 1...', 'text2': 'Sample text 1...', 'embedding': '[-4.94665056e-02 -2.38676026e-...'}]\n</code></pre> <ul> <li>get embeddings</li> </ul> <pre><code>results = handler.search_database(\n    query = \"text\",\n    filter_criteria = {\n        \"text\" : \"Sample text 1\"\n    },\n    return_keys_list=[\"embedding\"]\n)\nprint([{k: str(v)[:30] + \"...\" for k, v in result.items()} for result in results])\n\n</code></pre> <pre><code>[{'embedding': '[-4.94665056e-02 -2.38676026e-...'}]\n</code></pre> <ul> <li>get embeddings and embedded field</li> </ul> <pre><code>results = handler.search_database(\n    query = \"text\",\n    filter_criteria = {\n        \"text\" : \"Sample text 1\"\n    },\n    return_keys_list=[\"embedding\", \"+&amp;embedded_field\"]\n)\nprint([{k: str(v)[:30] + \"...\" for k, v in result.items()} for result in results])\n\n</code></pre> <pre><code>[{'&amp;embedded_field': 'text...', 'embedding': '[-4.94665056e-02 -2.38676026e-...'}]\n</code></pre>"},{"location":"usage-examples/#3-removing-values-from-the-database","title":"3. Removing values from the database","text":"<pre><code>print(f\"Items in the database {len(handler.data)}\")\nhandler.remove_from_database(filter_criteria = {\"text\": \"Sample text 1\"})\nprint(f\"Items left in the database {len(handler.data)}\")\n\n</code></pre> <pre><code>Items in the database 2\nItems left in the database 1\n</code></pre>"},{"location":"usage-examples/#4-testing-the-hnsw-search-algorithm","title":"4. Testing the HNSW Search Algorithm","text":"<pre><code>mss = MockerSimilaritySearch(\n    # optional\n    search_results_n = 3,\n    similarity_params = {'space':'cosine'},\n    similarity_search_type ='linear'\n)\n\nste = SentenceTransformerEmbedder(# optional / adaptor parameters\n                                  processing_type = '',\n                                  tbatch_size = 500,\n                                  max_workers = 2,\n                                  # sentence transformer parameters\n                                  model_name_or_path = 'paraphrase-multilingual-mpnet-base-v2',\n                                  SentenceTransformer = SentenceTransformer)\n</code></pre> <pre><code># Create embeddings\nembeddings = [ste.embed(\"example1\"), ste.embed(\"example2\")]\n\n\n# Assuming embeddings are pre-calculated and stored in 'embeddings'\ndata_with_embeddings = {\"record1\": {\"embedding\": embeddings[0]}, \"record2\": {\"embedding\": embeddings[1]}}\nhandler.data = data_with_embeddings\n\n# HNSW Search\nquery_embedding = embeddings[0]  # Example query embedding\nlabels, distances = mss.hnsw_search(query_embedding, np.array(embeddings), k=1)\nprint(labels, distances)\n\n</code></pre> <pre><code>[0] [1.1920929e-07]\n</code></pre>"}]}