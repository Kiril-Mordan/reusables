{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Intro","text":"<p>MockerDB is a python module that contains mock vector database like solution built around python dictionary data type. It contains methods necessary to interact with this 'database', embed, search and persist.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install mocker-db\n</code></pre>"},{"location":"cli/","title":"Cli","text":"<pre><code>mockerdb --help\n</code></pre> <pre><code>Usage: mockerdb [OPTIONS] COMMAND [ARGS]...\n\n  Package Auto Assembler CLI tool.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  init-config  Initialize config file for api\n</code></pre> <p>MockerDB API can be run through <code>package-auto-assembler</code> functionality using the following command:</p> <pre><code>paa run-api-routes --package mocker_db\n</code></pre> <p>To change default config values, a file named <code>.mockerdb.api.config</code> needs to be located in path the <code>paa</code> command is run. By initializing config, you can see defailt config and edit it.</p> <pre><code>mockerdb init-config  --help\n</code></pre> <pre><code>Usage: mockerdb init-config [OPTIONS]\n\n  Initialize config file for api\n\nOptions:\n  --help  Show this message and exit.\n</code></pre>"},{"location":"flow/","title":"Flow","text":""},{"location":"release-notes/","title":"Release notes","text":""},{"location":"release-notes/#025","title":"0.2.5","text":"<pre><code>- simple cli for initializing optional config\n\n- wiring mocker connector into main mocker class\n\n- a single interface to interact with local and remote mocker\n\n- packaging existing mocker-db api routes with latest search options\n</code></pre>"},{"location":"release-notes/#024","title":"0.2.4","text":"<pre><code>- making hnswlib optional dependency\n</code></pre>"},{"location":"release-notes/#023","title":"0.2.3","text":"<pre><code>- providing flag to disable embedder initialization\n\n- disabling old cli intefrace\n\n- removing sentence_transformers from the list of default requirements so that SentenceTransformer needs to be provided externally if needed\n</code></pre>"},{"location":"release-notes/#022","title":"0.2.2","text":"<pre><code>- option to get embedded field\n\n- initial llm filter\n</code></pre>"},{"location":"release-notes/#021","title":"0.2.1","text":"<pre><code>- ability to return unique hash key for each record, previously inaccesible\n</code></pre>"},{"location":"release-notes/#020","title":"0.2.0","text":"<pre><code>- precise keywords match with cutoff 1 and fuzzy match with &lt; 1 through filters\n\n- keywords search with difflib\n</code></pre>"},{"location":"release-notes/#013","title":"0.1.3","text":"<pre><code>- option to add embedding and distance to output list\n\n- option to remove output key while outputting the rest of keys\n</code></pre>"},{"location":"release-notes/#012","title":"0.1.2","text":"<pre><code>- initital cli interface that allows to clone code from api version of mocker and run it\n</code></pre>"},{"location":"release-notes/#011","title":"0.1.1","text":"<pre><code>- initial MockerConnect for using MockerDB API\n</code></pre>"},{"location":"release-notes/#0012","title":"0.0.12","text":"<pre><code>-  bugfix for similarity search through partly embedded data\n</code></pre>"},{"location":"release-notes/#0011","title":"0.0.11","text":"<pre><code>- more advanced filtering\n</code></pre>"},{"location":"release-notes/#0010","title":"0.0.10","text":"<pre><code>- fix for search without embeddings\n</code></pre>"},{"location":"release-notes/#006","title":"0.0.6","text":"<pre><code>- fix for embedding storage\n</code></pre>"},{"location":"release-notes/#005","title":"0.0.5","text":"<pre><code>- initial implementation of separate caching store for embeddings\n</code></pre>"},{"location":"release-notes/#004","title":"0.0.4","text":"<pre><code>- updating hnswlib 0.7.0 -&gt; 0.8.0 to fix vulnerabilities issue\n\n- fixing a bug with resetting mocker inner state properly after search\n</code></pre>"},{"location":"release-notes/#003","title":"0.0.3","text":"<pre><code>- slightly improving logic of embedding with batches in parallel for sentence transformer embedder (default embedder)\n\n- updating desciption\n</code></pre>"},{"location":"release-notes/#002","title":"0.0.2","text":"<pre><code>- better error handling in situations when data was not found with applied filters\n</code></pre>"},{"location":"release-notes/#001","title":"0.0.1","text":"<pre><code>- initial version of MockerDB package that evolved from mock classes from redis into a standalone solution\n</code></pre>"},{"location":"usage-examples/","title":"Usage examples","text":"<pre><code>from mocker_db import MockerDB, MockerConnector, SentenceTransformerEmbedder\n</code></pre>"},{"location":"usage-examples/#1-inserting-values-into-the-database","title":"1. Inserting values into the database","text":"<p>MockerDB can be used as ephemeral database where everything is saved in memory, but also can be persisted in one file for the database and another for embeddings storage.</p> <p>Embedder is set to sentence_transformer by default and processed locally, custom embedders that connect to an api or use other open source models could be used as long as they have the same interface. </p> <pre><code># Initialization\nhandler = MockerDB(\n    # optional\n    embedder_params = {'model_name_or_path' : 'paraphrase-multilingual-mpnet-base-v2',\n                        'processing_type' : 'batch',\n                        'tbatch_size' : 500},\n    use_embedder = True,\n    embedder = SentenceTransformerEmbedder,\n    persist = True\n)\n# Initialize empty database\nhandler.establish_connection(\n    # optional for persist\n    file_path = \"./mock_persist\",\n    embs_file_path = \"./mock_embs_persist\",\n)\n</code></pre> <pre><code># Insert Data\nvalues_list = [\n    {\"text\": \"Sample text 1\",\n     \"text2\": \"Sample text 1\"},\n    {\"text\": \"Sample text 2\",\n     \"text2\": \"Sample text 2\"}\n]\nhandler.insert_values(values_list, \"text\")\nprint(f\"Items in the database {len(handler.data)}\")\n</code></pre> <pre><code>Items in the database 2\n</code></pre>"},{"location":"usage-examples/#2-searching-and-retrieving-values-from-the-database","title":"2. Searching and retrieving values from the database","text":"<p>There are multiple options for search which could be used together or separately:</p> <ul> <li>simple filter</li> <li>filter with keywords</li> <li>llm filter</li> <li> <p>search based on similarity</p> </li> <li> <p>get all keys</p> </li> </ul> <pre><code>results = handler.search_database(\n    query = \"text\",\n    filter_criteria = {\n        \"text\" : \"Sample text 1\",\n    }\n)\nprint([{k: str(v)[:30] + \"...\" for k, v in result.items()} for result in results])\n</code></pre> <pre><code>[{'text': 'Sample text 1...', 'text2': 'Sample text 1...'}]\n</code></pre> <ul> <li>get all keys with keywords search</li> </ul> <pre><code>results = handler.search_database(\n    query = \"text\",\n    # when keyword key is provided filter is used to pass keywords\n    filter_criteria = {\n        \"text\" : [\"1\"],\n    },\n    keyword_check_keys = ['text'],\n    # percentage of filter keyword allowed to be different\n    keyword_check_cutoff = 1,\n    return_keys_list=['text']\n)\nprint([{k: str(v)[:30] + \"...\" for k, v in result.items()} for result in results])\n</code></pre> <pre><code>[{'text': 'Sample text 1...'}]\n</code></pre> <ul> <li>get all key - text2</li> </ul> <pre><code>results = handler.search_database(\n    query = \"text\",\n    filter_criteria = {\n        \"text\" : \"Sample text 1\",\n    },\n    return_keys_list=[\"-text2\"])\nprint([{k: str(v)[:30] + \"...\" for k, v in result.items()} for result in results])\n</code></pre> <pre><code>[{'text': 'Sample text 1...'}]\n</code></pre> <ul> <li>get all keys + distance</li> </ul> <pre><code>results = handler.search_database(\n    query = \"text\",\n    filter_criteria = {\n        \"text\" : \"Sample text 1\"\n    },\n    return_keys_list=[\"+&amp;distance\"]\n)\nprint([{k: str(v)[:30] + \"...\" for k, v in result.items()} for result in results])\n</code></pre> <pre><code>[{'text': 'Sample text 1...', 'text2': 'Sample text 1...', '&amp;distance': '0.6744726...'}]\n</code></pre> <ul> <li>get distance</li> </ul> <pre><code>results = handler.search_database(\n    query = \"text\",\n    filter_criteria = {\n        \"text\" : \"Sample text 1\"\n    },\n    return_keys_list=[\"&amp;distance\"]\n)\nprint([{k: str(v)[:30] + \"...\" for k, v in result.items()} for result in results])\n</code></pre> <pre><code>[{'&amp;distance': '0.6744726...'}]\n</code></pre> <ul> <li>get all keys + embeddings</li> </ul> <pre><code>results = handler.search_database(\n    query = \"text\",\n    filter_criteria = {\n        \"text\" : \"Sample text 1\"\n    },\n    return_keys_list=[\"+embedding\"]\n)\nprint([{k: str(v)[:30] + \"...\" for k, v in result.items()} for result in results])\n</code></pre> <pre><code>[{'text': 'Sample text 1...', 'text2': 'Sample text 1...', 'embedding': '[-4.94665056e-02 -2.38676026e-...'}]\n</code></pre> <ul> <li>get embeddings</li> </ul> <pre><code>results = handler.search_database(\n    query = \"text\",\n    filter_criteria = {\n        \"text\" : \"Sample text 1\"\n    },\n    return_keys_list=[\"embedding\"]\n)\nprint([{k: str(v)[:30] + \"...\" for k, v in result.items()} for result in results])\n\n</code></pre> <pre><code>[{'embedding': '[-4.94665056e-02 -2.38676026e-...'}]\n</code></pre> <ul> <li>get embeddings and embedded field</li> </ul> <pre><code>results = handler.search_database(\n    query = \"text\",\n    filter_criteria = {\n        \"text\" : \"Sample text 1\"\n    },\n    return_keys_list=[\"embedding\", \"+&amp;embedded_field\"]\n)\nprint([{k: str(v)[:30] + \"...\" for k, v in result.items()} for result in results])\n\n</code></pre> <pre><code>[{'embedding': '[-4.94665056e-02 -2.38676026e-...', '&amp;embedded_field': 'text...'}]\n</code></pre>"},{"location":"usage-examples/#3-removing-values-from-the-database","title":"3. Removing values from the database","text":"<pre><code>print(f\"Items in the database {len(handler.data)}\")\nhandler.remove_from_database(filter_criteria = {\"text\": \"Sample text 1\"})\nprint(f\"Items left in the database {len(handler.data)}\")\n\n</code></pre> <pre><code>Items in the database 2\nItems left in the database 1\n</code></pre>"},{"location":"usage-examples/#4-embeding-text","title":"4 Embeding text","text":"<pre><code>results = handler.embed_texts(\n    texts = [\n    \"Short. Variation 1: Short.\",\n    \"Another medium-length example, aiming to test the variability in processing different lengths of text inputs. Variation 2: processing lengths medium-length example, in inputs. to variability aiming test of text different the Another\"\n  ]\n)\n\nprint(str(results)[0:300] + \"...\")\n</code></pre> <pre><code>{'embeddings': [[0.04973424971103668, -0.43570247292518616, -0.014545125886797905, -0.03648979589343071, -0.04165348783135414, -0.04544278606772423, -0.07025150209665298, 0.10043243318796158, -0.20846229791641235, 0.15596869587898254, 0.11489829421043396, -0.13442179560661316, -0.02425091527402401, ...\n</code></pre>"},{"location":"usage-examples/#5-using-mockerdb-api","title":"5. Using MockerDB API","text":"<p>Remote Mocker can be used via very similar methods to the local one.</p> <pre><code># Initialization\nhandler = MockerDB(\n    skip_post_init=True\n)\n# Initialize empty database\nhandler.establish_connection(\n     # optional for connecting to api\n    connection_details = {\n        'base_url' : \"http://localhost:8000/mocker-db\"\n    }\n)\n</code></pre> <pre><code># Insert Data\nvalues_list = [\n    {\"text\": \"Sample text 1\",\n     \"text2\": \"Sample text 1\"},\n    {\"text\": \"Sample text 2\",\n     \"text2\": \"Sample text 2\"}\n]\nhandler.insert_values(values_list, \"text\")\n</code></pre> <pre><code>HTTP Request: POST http://localhost:8000/mocker-db/insert \"HTTP/1.1 200 OK\"\n\n\n\n\n\n{'status': 'success', 'message': ''}\n</code></pre> <p>MockerAPI has multiple handlers stored in memory at a time, they can be displayed with number of items and memory estimate.</p> <pre><code>handler.show_handlers()\n</code></pre> <pre><code>HTTP Request: GET http://localhost:8000/mocker-db/active_handlers \"HTTP/1.1 200 OK\"\n\n\n\n\n\n{'results': [{'handler': 'default',\n   'items': 4,\n   'memory_usage': 1.3744659423828125}],\n 'status': 'success',\n 'message': '',\n 'handlers': ['default'],\n 'items': [4],\n 'memory_usage': [1.3744659423828125]}\n</code></pre> <pre><code>results = handler.search_database(\n    query = \"text\",\n    filter_criteria = {\n        \"text\" : \"Sample text 1\",\n    }\n)\n\nresults\n</code></pre> <pre><code>HTTP Request: POST http://localhost:8000/mocker-db/search \"HTTP/1.1 200 OK\"\n\n\n\n\n\n{'status': 'success',\n 'message': '',\n 'handler': 'default',\n 'results': [{'other_field': 'Additional data', 'text': 'Example text 1'},\n  {'other_field': 'Additional data', 'text': 'Example text 2'},\n  {'text': 'Sample text 1', 'text2': 'Sample text 1'},\n  {'text': 'Sample text 2', 'text2': 'Sample text 2'}]}\n</code></pre> <pre><code>results = handler.embed_texts(\n    texts = [\n    \"Short. Variation 1: Short.\",\n    \"Another medium-length example, aiming to test the variability in processing different lengths of text inputs. Variation 2: processing lengths medium-length example, in inputs. to variability aiming test of text different the Another\"\n  ],\n    # optional\n    embedding_model = \"intfloat/multilingual-e5-base\"\n)\n\nprint(str(results)[0:500] + \"...\")\n</code></pre> <pre><code>HTTP Request: POST http://localhost:8000/mocker-db/embed \"HTTP/1.1 200 OK\"\n\n\n{'status': 'success', 'message': '', 'handler': 'cache_mocker_intfloat_multilingual-e5-base', 'embedding_model': 'intfloat/multilingual-e5-base', 'embeddings': [[-0.021023565903306007, 0.03461984172463417, -0.01310338918119669, 0.03071131743490696, 0.023395607247948647, -0.04054545238614082, -0.015805143862962723, -0.02682858146727085, 0.01583343744277954, 0.01763748936355114, 0.0008703064522705972, -0.011133715510368347, 0.11296682059764862, 0.015158131718635559, -0.0466904453933239, -0.0481428...\n</code></pre> <pre><code>handler.show_handlers()\n</code></pre> <pre><code>HTTP Request: GET http://localhost:8000/mocker-db/active_handlers \"HTTP/1.1 200 OK\"\n\n\n\n\n\n{'results': [{'handler': 'default',\n   'items': 4,\n   'memory_usage': 1.3749237060546875},\n  {'handler': 'cache_mocker_intfloat_multilingual-e5-base',\n   'items': 2,\n   'memory_usage': 1.3611679077148438}],\n 'status': 'success',\n 'message': '',\n 'handlers': ['default', 'cache_mocker_intfloat_multilingual-e5-base'],\n 'items': [4, 2],\n 'memory_usage': [1.3749237060546875, 1.3611679077148438]}\n</code></pre>"}]}